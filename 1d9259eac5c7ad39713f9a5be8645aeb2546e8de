{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "824cacd6_13d8346b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1577257
      },
      "writtenOn": "2024-07-23T19:43:04Z",
      "side": 1,
      "message": "Cool! That sounds like a nice optimization and good tradeoff (the machines that we have rarely seem to be able to use all that RAM :)).\n\nDo you have some benchmark numbers that show the difference in CPU time and memory consumption? Due to lack of experience with Go GC tuning I have absolutely no intuition about how much we\u0027re talking about here.",
      "revId": "1d9259eac5c7ad39713f9a5be8645aeb2546e8de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fe10a2e_de54cbca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1444553
      },
      "writtenOn": "2024-07-23T19:53:15Z",
      "side": 1,
      "message": "https://tip.golang.org/doc/gc-guide\n\nWhat this knob does is determine when a gc is triggered based on \u0027new heap\u0027 size vs \u0027live heap\u0027 from the previous gc cycle.  New heap is stuff freshly allocated since the previous cycle, and live heap is what was still around at the end of the last cycle.  It\u0027s a percentage of new heap to live heap.\n\nThe default is 100, so that will trigger a gc whenever the amount of newly allocated heap is 100% of what was live before.  This sets it to 500, so it gcs less frequently.  The CPU cost is fairly constant (explained in the link), so gcing less is actually less cpu intensive overall.",
      "parentUuid": "824cacd6_13d8346b",
      "revId": "1d9259eac5c7ad39713f9a5be8645aeb2546e8de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54f2bab9_d2181bb0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1444553
      },
      "writtenOn": "2024-07-23T20:14:28Z",
      "side": 1,
      "message": "In terms of actual numbers I found on linux that going from 100 to 500 reduces GC CPU % from around 3-5% to under 1%.  So not a huge impact there, but an impact nontheless.\n\nI have a feeling (possibly an incorrect one) that frequent GC cycling could be the cause of the occasional complaints about builds slowing down after they have been running for a while.",
      "parentUuid": "4fe10a2e_de54cbca",
      "revId": "1d9259eac5c7ad39713f9a5be8645aeb2546e8de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c24313fc_8e9f872d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1577257
      },
      "writtenOn": "2024-07-23T22:13:23Z",
      "side": 1,
      "message": "@ukai@google.com Do you have some advice or any concerns for this change?",
      "revId": "1d9259eac5c7ad39713f9a5be8645aeb2546e8de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49e71a3b_665e364b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001939
      },
      "writtenOn": "2024-07-23T22:46:58Z",
      "side": 1,
      "message": "won\u0027t this change cause more bot die with OOM?",
      "parentUuid": "c24313fc_8e9f872d",
      "revId": "1d9259eac5c7ad39713f9a5be8645aeb2546e8de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1359135f_3d7d460c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001939
      },
      "writtenOn": "2024-07-23T23:59:05Z",
      "side": 1,
      "message": "ah, nvm. it is not used on bot.\nbtw, this GC problem only happens for developers, not on bot?\nthere are leak in reproxy?\n\nbetter to set GOGC just for start_reproxy ?",
      "parentUuid": "49e71a3b_665e364b",
      "revId": "1d9259eac5c7ad39713f9a5be8645aeb2546e8de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44000b09_91acaf8c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1577257
      },
      "writtenOn": "2024-07-25T07:52:45Z",
      "side": 1,
      "message": "I thought about this some more, and I think we should first rule out that a memory leak is responsible for this GC issue. I fear that if we add this, we\u0027ll never remove it again, because it will be very hard to prove that it is safe to do so, and we\u0027ll incur the higher memory consumption from then on. :/\n\nIf that increased consumption causes a developer machine to start swapping out memory to disk or not be able to cache as many files in RAM anymore, they\u0027ll be in an even worse situation for performance. A lot of developers build Chromium on notebooks, because thanks to remote execution that\u0027s actually feasible now, and we don\u0027t want to break that use case.\n\nOf course if we can\u0027t find any other way, and reproxy turns out to be a legitimate case where the GC needs some tuning to perform well, we can think about it. Just want to be careful.\n\nWDYT?",
      "revId": "1d9259eac5c7ad39713f9a5be8645aeb2546e8de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}