{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5b78090c_24935055",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1367998
      },
      "writtenOn": "2024-02-20T23:59:42Z",
      "side": 1,
      "message": "Ideally it returns a unique exit code if `git cl presubmit` itself fails vs. a check that it\u0027s running fails, and right now retcode 1 can mean both. WDYT about keeping 1 as \"git cl presubmit itself failed\" and adding 2 as \"git cl presubmit ran fine, but got some presubmit errors\" and 3 as \"git cl presubmit ran fine, but got some presubmit warnings\"?\n\nIf we decide to change the exit codes, we\u0027ll also need to check/update the presubmit recipe module section here: https://source.chromium.org/chromium/chromium/tools/depot_tools/+/main:recipes/recipe_modules/presubmit/api.py;l\u003d178-192;drc\u003d0696c428b04513254d3b3e0b1fba5e5afdb11cf4",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 47
      },
      "revId": "89a02c1a307f2449b467298564042e1e1416fb66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11958b05_aaa79e8d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1394418
      },
      "writtenOn": "2024-02-21T00:24:19Z",
      "side": 1,
      "message": "That generally sounds good. For the recipe modifications, would that just be changing `if retcode \u003d\u003d 0:` to be `if retcode in (0, 2, 3):` instead, or are there other changes that need to be made?",
      "parentUuid": "5b78090c_24935055",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 47
      },
      "revId": "89a02c1a307f2449b467298564042e1e1416fb66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca3bdf73_70f09eb9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1367998
      },
      "writtenOn": "2024-02-21T00:56:01Z",
      "side": 1,
      "message": "Yeah, we\u0027d need to make sure the retcode gets classified correctly as success/failure/infra_failure, so also something like changing https://source.chromium.org/chromium/chromium/tools/depot_tools/+/main:recipes/recipe_modules/presubmit/api.py;l\u003d187;drc\u003d0696c428b04513254d3b3e0b1fba5e5afdb11cf4 to fail on 2.\n\nAlso something that @ddoman@chromium.org had brought up was in the case this returns non-0, some Swarming tasks could be marked as infra failure instead of non-infra failure, but I\u0027m not confident how that would impact things down the line, especially with changes in the paragraph above",
      "parentUuid": "11958b05_aaa79e8d",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 47
      },
      "revId": "89a02c1a307f2449b467298564042e1e1416fb66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2bd2912f_bb1363eb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-02-21T05:41:55Z",
      "side": 1,
      "message": "First of all, the status of a Swarming task is marked as failed, if the given command process exits with a non-0 code. It\u0027s totally up to the executable\u0027s decision to return 0 (success) or non-0 (failure).\n\nSecondly, `git cl presubmit` also honors the exit code returned by the actual test executable. If the presubmit executable exists with 0, it exists with 0. If not, `git cl presubmit` exists with the non-0 exit code that the presubmit executable returned.\n\nTo me that, the test executable actually doesn\u0027t consider a unit test failure as a command failure, so that it returns 0, and this CL tries to change the executable\u0027s decision by changing the logic in `git cl presubmit`.\n\nIf possible, my first pick would be to update the presubmit test binaries such that it would actually return a non-0 exit code, when any of the tests failed. Returning a non-0 exit code (failure) for any warnings should also be an option passed to the presubmit executable. It\u0027d just be similar to `-Werr\u003dall` of gcc. I don\u0027t think `git cl presubmit` is the best place to add such an option.\n\nIf the above option is not available, I\u0027d consider creating a personal shell function. For example, you could run `git test` as follows.\n\n`git test run -x \"run_and_check_presubmit.sh\"`\n\n```\n#/bin/bash\n# run_and_check_presubmit.sh\ngit cl presubmit\nif ! [ $? -eq 0 ]; then\n  # something failed hard\n  exit $?\nfi\n\n# check if the output.json contains any failure or warning\n# if so, exit with 1 or 2.\n....\n```\n\nIf it\u0027s difficult to update the presubmit binaries to exit with a non-0 code in failures/warnings, and using run_and_check_presubmit.sh is not desirable, then please let us know. Then, this CL would be reasonable to roll out. (we still need to update the recipes with a stamp from browser infra teams, though)",
      "parentUuid": "ca3bdf73_70f09eb9",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 47
      },
      "revId": "89a02c1a307f2449b467298564042e1e1416fb66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a3cb4bd_ad846917",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1394418
      },
      "writtenOn": "2024-02-21T06:28:39Z",
      "side": 1,
      "message": "Thank you for the input! It seems like this CL has much more wider reaching implications than I expected.\n\nThe bash script to check output.json sounds reasonable. I was also possibly thinking of a flag which enables this behaviour, but considering that such functionality is possible through a bash script, I would personally prefer that we _didn\u0027t_ have this built-in.\n\nI\u0027ll probably abandon this CL, then. Thank you for taking a look!",
      "parentUuid": "2bd2912f_bb1363eb",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 47
      },
      "revId": "89a02c1a307f2449b467298564042e1e1416fb66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d73119ce_f0609d35",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 4696,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-02-21T05:41:55Z",
      "side": 1,
      "message": "This calls sys.Exit() with the exit code of the presubmit hook, if exist_code \u003e 0. In other words, `git cl presubmit` exists with the same code that the presubmit command/hook exited with.\n\nIf the presubmit command exited with 0, but the json output, which `results` is generated from, contains errors/warnings, then I\u0027d claim that `git cl format` should consider that execution of the git cl presubmit command succeeded.\n\nThat said, I\u0027m still on the fence. Would you be able to use another command like\n\n\nThus, I\u0027d claim that the presubmit command should \nThe `results` is from the json_output of the presubmit command. If the command exited with 0, then I think this CL \n\n I\u0027d claim that git cl presubmit exists with the same exit code that the presubmit command/hooks exited with.",
      "range": {
        "startLine": 4696,
        "startChar": 17,
        "endLine": 4696,
        "endChar": 24
      },
      "revId": "89a02c1a307f2449b467298564042e1e1416fb66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}