{
  "comments": [
    {
      "key": {
        "uuid": "9b4c5ba5_eac58e2c",
        "filename": "presubmit_canned_checks.py",
        "patchSetId": 1
      },
      "lineNbr": 1362,
      "author": {
        "id": 1170419
      },
      "writtenOn": "2019-10-07T17:39:11Z",
      "side": 1,
      "message": "nit: trailing \u0027a\u0027",
      "range": {
        "startLine": 1362,
        "startChar": 66,
        "endLine": 1362,
        "endChar": 67
      },
      "revId": "4db1327bf14e997529e9c09a1428c43d06863d2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01fe6d24_2307d822",
        "filename": "presubmit_canned_checks.py",
        "patchSetId": 1
      },
      "lineNbr": 1362,
      "author": {
        "id": 1355758
      },
      "writtenOn": "2019-10-08T20:59:26Z",
      "side": 1,
      "message": "Woops, fixed.",
      "parentUuid": "9b4c5ba5_eac58e2c",
      "range": {
        "startLine": 1362,
        "startChar": 66,
        "endLine": 1362,
        "endChar": 67
      },
      "revId": "4db1327bf14e997529e9c09a1428c43d06863d2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69cdd51a_ddc9269f",
        "filename": "presubmit_canned_checks.py",
        "patchSetId": 1
      },
      "lineNbr": 1389,
      "author": {
        "id": 1170419
      },
      "writtenOn": "2019-10-07T17:39:11Z",
      "side": 1,
      "message": "nit: With no arg, split() defaults to splitting on any whitespace. So I think these 2 lines could be combined into `parts \u003d ent.split()` ?",
      "range": {
        "startLine": 1388,
        "startChar": 4,
        "endLine": 1389,
        "endChar": 39
      },
      "revId": "4db1327bf14e997529e9c09a1428c43d06863d2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0966a865_d91b1596",
        "filename": "presubmit_canned_checks.py",
        "patchSetId": 1
      },
      "lineNbr": 1389,
      "author": {
        "id": 1355758
      },
      "writtenOn": "2019-10-08T20:59:26Z",
      "side": 1,
      "message": "While that\u0027s possible, the intent was to correctly break down the `ls-tree` output; representing that as two parts split by a tab (metadata and path) and then the metadata as space-separated felt more germane to the original format, and easier to pull out to use generally later. I did go back and add max-split limits on these, so that it more closely matches the input format (and better handles paths that contain tab characters).",
      "parentUuid": "69cdd51a_ddc9269f",
      "range": {
        "startLine": 1388,
        "startChar": 4,
        "endLine": 1389,
        "endChar": 39
      },
      "revId": "4db1327bf14e997529e9c09a1428c43d06863d2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38e3d82e_448e8bf3",
        "filename": "presubmit_canned_checks.py",
        "patchSetId": 1
      },
      "lineNbr": 1393,
      "author": {
        "id": 1170419
      },
      "writtenOn": "2019-10-07T17:39:11Z",
      "side": 1,
      "message": "These checks are run on every change to chromium. So theoretically we don\u0027t have to recurse through every file in the whole tree, but instead check only the files that we just changed.\n\nie: Can we instead run `git ls-tree HEAD -- $file` for every file in input_api.AffectedSourceFiles() ? I imagine that would speed things up a bit.",
      "revId": "4db1327bf14e997529e9c09a1428c43d06863d2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f8ff2e2_599475cc",
        "filename": "presubmit_canned_checks.py",
        "patchSetId": 1
      },
      "lineNbr": 1393,
      "author": {
        "id": 1355758
      },
      "writtenOn": "2019-10-08T20:59:26Z",
      "side": 1,
      "message": "We can\u0027t - commit objects in the tree don\u0027t get detected by the diff commands used to compute the presubmit delta. There are other commands that _would_ get this (git diff-tree, for example), but that\u0027d require better wiring of change base information through presubmit, or changing the initial delta computation in presubmit, or carrying along both sets of data - all of which increase the scope of this PR by a bit. The check is 1.8 seconds on my dev box (incl. the rest of presubmit) and runs only in commit-level - we\u0027re shaving this yak pretty close.",
      "parentUuid": "38e3d82e_448e8bf3",
      "revId": "4db1327bf14e997529e9c09a1428c43d06863d2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11ef1998_b8f51442",
        "filename": "presubmit_canned_checks.py",
        "patchSetId": 1
      },
      "lineNbr": 1393,
      "author": {
        "id": 1170419
      },
      "writtenOn": "2019-10-08T22:11:32Z",
      "side": 1,
      "message": "Not even input_api.AffectedFiles()? Reading through it, it seems like it\u0027d do the trick.",
      "parentUuid": "6f8ff2e2_599475cc",
      "revId": "4db1327bf14e997529e9c09a1428c43d06863d2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fae75457_b5c9da58",
        "filename": "presubmit_canned_checks.py",
        "patchSetId": 1
      },
      "lineNbr": 1393,
      "author": {
        "id": 1355758
      },
      "writtenOn": "2019-10-08T22:38:09Z",
      "side": 1,
      "message": "Nope, not even input_api.AffectedFiles(). I modified the script to print out what ended up in input_api.AffectedFiles(), and got:\n\n    demorri ? ? user/demorri/weird ? ~/anaheim/src ? time git ms presubmit d1c56f567b15020d52582684ba635069ddc0a5eb --commit\n    common ancestor chosen as base is d1c56f567b15020d52582684ba635069ddc0a5eb\n    Running presubmit commit checks ...\n    \n    \n    \u003d\u003d\u003d\u003dGIT AFFECTED FILES\u003d\u003d\u003d\u003d\n    [\u0027MSPUBLISH\u0027]\n    \u003d\u003d\u003d\u003dEND OF INTERESTING PART\u003d\u003d\u003d\u003d\n    \n    \n    \n      checking for commit objects in tree took a long time: 522ms\n    \n    ** Presubmit Messages **\n    Missing LGTM from an MSOWNER for these files:\n        MSPUBLISH\n    \n    Suggested MSOWNERS: (Use \"git-cl owners\" to interactively select owners.)\n        edgeesbdw@microsoft.com\n    \n    ** Presubmit ERRORS **\n    Commit objects present within tree.\n    This may be due to submodule-related interactions; the presence of a\n    commit object in the tree may lead to odd situations where files are\n    inconsistently checked-out. Remove these commit entries and validate\n    your changeset again:\n    \n      third_party/avif/libavif\n    \n    Presubmit checks took 3.5s to calculate.\n    \n    Was the presubmit check useful? If not, run \"git ms presubmit -v\"\n    to figure out which PRESUBMIT.py was run, then run git blame\n    on the file to figure out who to ask for help.\n    \n    real    0m5.319s\n    user    0m1.756s\n    sys     0m3.552s\n\n\nwhile git diff-tree shows\n    demorri   user/demorri/weird  ~/anaheim/src  git diff-tree -t d1c56f567b15020d52582684ba635069ddc0a5eb HEAD\n    :100644 100644 4e6550b3575671793dcb1fa4fa72846a360c5891 c562138ff1d8107b2827b341eb50e3fb9fdd94ba \nM      MSPUBLISH\n    :040000 040000 37fa7f343288217e45a10430d39bae0a7a2f2361 512b7285ad44fe44964d47968cccd6e45e6316f3 M      third_party\n    :000000 040000 0000000000000000000000000000000000000000 ec6f551ae7bef43a6cf2f50448997d5a65782f75 A      third_party/avif\n    :000000 160000 0000000000000000000000000000000000000000 22c1ad9f706ee00c3cdd0bb71ec4b7818de2f6c3 A      third_party/avif/libavif",
      "parentUuid": "11ef1998_b8f51442",
      "revId": "4db1327bf14e997529e9c09a1428c43d06863d2a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}