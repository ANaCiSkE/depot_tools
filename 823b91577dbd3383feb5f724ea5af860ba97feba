{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "80c85c1a_351b1145",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 24,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-02-23T17:40:02Z",
      "side": 1,
      "message": "If we support arbitrary filenames, we should also require sha1 or sha256 checksum so we can validate the content on remote wasn\u0027t tampered with.",
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95da54be_d69045de",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 24,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-02-23T17:40:02Z",
      "side": 1,
      "message": "nit: replace `file` with `path`.",
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93b3d90e_b6fad5ab",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 24,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-26T18:25:15Z",
      "side": 1,
      "message": "This was previously discussed with Joanna. Would it be wrong to expect that filenames should be changed by the user upon updating the contents? This would also reduce the toil from requiring a hash and expecting the hash to be produced from the correct hash constructor.",
      "parentUuid": "80c85c1a_351b1145",
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca1533ef_e1781e10",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 24,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-02-26T23:31:36Z",
      "side": 1,
      "message": "Having a checksum has other benefits, e.g. from a security perspective it ensures that the content wasn\u0027t tampered with.\n\n\u003e Would it be wrong to expect that filenames should be changed by the user upon updating the contents?\n\nIf there\u0027s no enforcement on this, based on Murphy\u0027s law, someone will make a mistake and override a file.",
      "parentUuid": "93b3d90e_b6fad5ab",
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40e23656_792796f1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-02-23T17:40:02Z",
      "side": 1,
      "message": "Where is node_linux_x64 coming from? Is that a directory inside tar_file.gz? If so, this should be updated to just say its extracted in the path.",
      "range": {
        "startLine": 29,
        "startChar": 2,
        "endLine": 29,
        "endChar": 59
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3a90d40_a2f8aa01",
        "filename": "call_google_storage.py",
        "patchSetId": 21
      },
      "lineNbr": 27,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-02-23T17:40:02Z",
      "side": 1,
      "message": "This can be removed, since 3.8+ is required (soon 3.11)",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 64
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb5765c1_8dab7939",
        "filename": "call_google_storage.py",
        "patchSetId": 21
      },
      "lineNbr": 27,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-26T18:25:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3a90d40_a2f8aa01",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 64
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5b8ba45_60d551f4",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2558,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2024-02-22T22:24:27Z",
      "side": 1,
      "message": "do we need both output_dir/.tmp and output_dir/hash?\n\nI think for both \"never downloaded before\" and \"previous download interrupted\" cases, we can determine that by whether output_dir/hash exists.\n\nand then other case of \"does previous download match wanted download\" we check contents of output_dir/hash\n\n?",
      "range": {
        "startLine": 2553,
        "startChar": 9,
        "endLine": 2558,
        "endChar": 24
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bed6815_4d99370a",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2558,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-26T18:25:15Z",
      "side": 1,
      "message": "Yes, good point. Removed .tmp for hashfile",
      "parentUuid": "e5b8ba45_60d551f4",
      "range": {
        "startLine": 2553,
        "startChar": 9,
        "endLine": 2558,
        "endChar": 24
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be356d66_7bb17558",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2578,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2024-02-22T22:24:27Z",
      "side": 1,
      "message": "I think it would make sense for this logic to be pulled into a separate function, for readability but also it would let us return `return False` early and skip evaluating other conditions.",
      "range": {
        "startLine": 2551,
        "startChar": 8,
        "endLine": 2578,
        "endChar": 18
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "14db9fa6_9b65918c",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2578,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-26T18:25:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be356d66_7bb17558",
      "range": {
        "startLine": 2551,
        "startChar": 8,
        "endLine": 2578,
        "endChar": 18
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b8260cc_05e8455f",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2593,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2024-02-22T22:24:27Z",
      "side": 1,
      "message": "if the dir was not successfully removed, what. happens at the `os.makedirs()` call?",
      "range": {
        "startLine": 2591,
        "startChar": 0,
        "endLine": 2593,
        "endChar": 31
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a48bc10_575ee499",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2593,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-26T18:25:15Z",
      "side": 1,
      "message": "Hmm looks like it would raise a FileExistsError in that case. If it\u0027s okay with you, we can just remove the try/except around rmtree and let any OSErrors raise.",
      "parentUuid": "0b8260cc_05e8455f",
      "range": {
        "startLine": 2591,
        "startChar": 0,
        "endLine": 2593,
        "endChar": 31
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48ea7e8e_2990aa3e",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2597,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2024-02-22T22:24:27Z",
      "side": 1,
      "message": "this should be replaced by something like:\nos.path.join(DEPOT_TOOLS, \u0027call_google_storage.py\u0027)\n\ne.g.\nhttps://source.chromium.org/chromium/chromium/tools/depot_tools/+/main:git_cl.py;l\u003d74?q\u003d%22%27vpython3%27%22\u0026ss\u003dchromium%2Fchromium%2Ftools%2Fdepot_tools",
      "range": {
        "startLine": 2597,
        "startChar": 12,
        "endLine": 2597,
        "endChar": 58
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4752547a_8f099dfb",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2597,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-26T18:25:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48ea7e8e_2990aa3e",
      "range": {
        "startLine": 2597,
        "startChar": 12,
        "endLine": 2597,
        "endChar": 58
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8fc531f_2d24a08a",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2605,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-02-23T17:40:02Z",
      "side": 1,
      "message": "This should be avoided as it adds business logic for tests into the production code. Perhaps we just mock subprocess2.call, or have a helper function _call_google_storage that can be easily mocked (ie content of this if block would go into the mock).",
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c9c85e4_9689f927",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2605,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-26T18:25:15Z",
      "side": 1,
      "message": "Mocking this out gets complex as we\u0027d also have to mock out the tarfile and the extracted contents. With the current state, we\u0027re able to assert that the tarfile contents are extracted in the proper place. If everything were mocked, the test wouldn\u0027t be able to check its local dir to assert that.\n\nTo make this more readable though, I can move these lines into a separate helper function. What do you think?",
      "parentUuid": "f8fc531f_2d24a08a",
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "896bd9c3_23f22d38",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2605,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-02-26T23:31:36Z",
      "side": 1,
      "message": "Then, a fake is better option. E.g. make subprocess2.call to place a tar file in output_file. So, something like:\n\n```\ndef test():\n   subprocess2.call \u003d lambda *args, **xargs: _create_test_tar()\n```\n\nIf there are other subprocess2.call calls, we can always extract that into its own method.",
      "parentUuid": "1c9c85e4_9689f927",
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c72ceaf_404c0887",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2605,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-27T17:44:48Z",
      "side": 1,
      "message": "I\u0027m having trouble with reassigning the subprocess2.call from within the test file. I believe it\u0027s because gclient sync is called by a subprocess2.Popen call (https://source.chromium.org/chromium/chromium/tools/depot_tools/+/main:tests/gclient_smoketest_base.py;l\u003d34?q\u003dgclient_smoke\u0026ss\u003dchromium%2Fchromium%2Ftools%2Fdepot_tools) instead of the `gclient` module being imported into the test file and called.\nDo you have a workaround?",
      "parentUuid": "896bd9c3_23f22d38",
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6762730f_8447e937",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2620,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2024-02-22T22:24:27Z",
      "side": 1,
      "message": "i\u0027m can\u0027t figure out what this is for. can you explain/add a comment in the code?",
      "range": {
        "startLine": 2620,
        "startChar": 11,
        "endLine": 2620,
        "endChar": 48
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "546faa1b_80998eb2",
        "filename": "gclient.py",
        "patchSetId": 21
      },
      "lineNbr": 2620,
      "author": {
        "id": 1398317
      },
      "writtenOn": "2024-02-26T18:25:15Z",
      "side": 1,
      "message": "Removed",
      "parentUuid": "6762730f_8447e937",
      "range": {
        "startLine": 2620,
        "startChar": 11,
        "endLine": 2620,
        "endChar": 48
      },
      "revId": "823b91577dbd3383feb5f724ea5af860ba97feba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}