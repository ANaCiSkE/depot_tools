{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "425d0b9c_38342f92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 7,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T15:59:14Z",
      "side": 1,
      "message": "Nit: Can this description be improved? E.g.:\n```\nAvoid silently overwriting diff.ignoreSubmodules config.\n\nSetting this to `dirty` is generally desirable. If the user has\nexplicitly set it to something else on their chromium checkout,\nwarn rather than silently overwriting.\n```",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f84f405b_ea5ff996",
        "filename": "/COMMIT_MSG",
        "patchSetId": 19
      },
      "lineNbr": 7,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T17:11:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "425d0b9c_38342f92",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0bc0f8dc_18ab5d86",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T08:00:35Z",
      "side": 1,
      "message": "took me a few more hours, but guess now i have a working PS and bots are green ðŸ¤˜\nhappy to address whatever is needed",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "253a8f4b_d8123ba8",
        "filename": "gclient_scm.py",
        "patchSetId": 19
      },
      "lineNbr": 685,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T15:59:14Z",
      "side": 1,
      "message": "Optional nit: Personally I think this and the next comment just restate the code and could be omitted.",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9692834b_052dba57",
        "filename": "gclient_scm.py",
        "patchSetId": 19
      },
      "lineNbr": 685,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T17:11:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "253a8f4b_d8123ba8",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48feb335_a6549faa",
        "filename": "gclient_scm.py",
        "patchSetId": 19
      },
      "lineNbr": 692,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T15:59:14Z",
      "side": 1,
      "message": "@sokcevic: Is there an .md or a short link we could supply here that has more detail of what users might encounter and why \"dirty\" is good?",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d09abc4_ce383d75",
        "filename": "gclient_scm.py",
        "patchSetId": 19
      },
      "lineNbr": 692,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-09-06T17:22:31Z",
      "side": 1,
      "message": "It\u0027s documented in go/prevent-accidental-gitlinks but that\u0027s not suitable for public.\n\nWe could add this sentence here:\n\n\u003e With ignoreSubmodules\u003dall, git diff \u003ccommit\u003e, git show, and git status do not show  if gitlinks are part of their commits. Developers need to use git plumbing commands (e.g. git diff-tree, git ls-tree) to actually see gitlink updates.\n\nThis is a less severe problem if user has gclient hook to detect unintentional submodule changes (https://chromium.googlesource.com/chromium/src/+/main/docs/git_submodules.md#Install-a-hook-to-help-detect-unintentional-submodule-commits).\n\nGiven that the message is getting too big, I think updating https://chromium.googlesource.com/chromium/src/+/main/docs/git_submodules.md and linking it from here is a good next step.",
      "parentUuid": "48feb335_a6549faa",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23b8a616_f3eb71a1",
        "filename": "gclient_scm.py",
        "patchSetId": 19
      },
      "lineNbr": 692,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T19:11:42Z",
      "side": 1,
      "message": "SGTM, I\u0027m fine with that as either part of this or a followon.",
      "parentUuid": "7d09abc4_ce383d75",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fbfbb3b_e9baed10",
        "filename": "gclient_scm.py",
        "patchSetId": 19
      },
      "lineNbr": 692,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T19:15:10Z",
      "side": 1,
      "message": "https://crrev.com/c/5841971 - and added a link to it from depot tools.",
      "parentUuid": "7d09abc4_ce383d75",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a8ba9f4_c9a85cd7",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 251,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T15:59:14Z",
      "side": 1,
      "message": "Trivial nit: Unnecessary newline here since the next check is semantically part of \"load the value\". (Also on the `values` block lower down)",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "934d3402_5f407a2c",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 251,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T17:11:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a8ba9f4_c9a85cd7",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "245b52c9_848a0c09",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 252,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T15:59:14Z",
      "side": 1,
      "message": "Curiosity: As a non-Python person, what\u0027s the difference between `\u003d\u003d None` here and `not` in the next condition below? Do they do the same thing? If so, shouldn\u0027t they be written the same way?",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "668af71e_b03ce36f",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 252,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T17:11:15Z",
      "side": 1,
      "message": "did a bit of research - `\u003d\u003d None`  checks only for `None`  - `not xyz`  checks for falsyness - changed everything to `not`  as this makes more sense.",
      "parentUuid": "245b52c9_848a0c09",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1841d76a_928642fc",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 252,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-09-06T17:22:31Z",
      "side": 1,
      "message": "`\u003d\u003d None` is an explicit check if var is None. `not var` will be true if var is empty/zero/false, e.g. None, False, 0, \"\", b\u0027\u0027, [], {}, etc.",
      "parentUuid": "245b52c9_848a0c09",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f12d2f0_9da4cb1d",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 256,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T15:59:14Z",
      "side": 1,
      "message": "Nit: Shouldn\u0027t this be `scoped_config \u003d scoped_config.get(scope, None)` to save work?",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68eec4c3_aca9b382",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 256,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T17:11:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f12d2f0_9da4cb1d",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14721dd7_d9063be5",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 403,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T08:00:35Z",
      "side": 1,
      "message": "asking for help here, this works, but i out my self as a non-python native person.\nnot sure which is my native one, but python is one of the weaker languages. maybe someone with more python know how can improve this.",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bf5ef32_44a0ac26",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 403,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T17:11:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14721dd7_d9063be5",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "511fd0c1_0889fcce",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 408,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T15:59:14Z",
      "side": 1,
      "message": "Does python not have a `++` equivalent? (2 places)",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c075724_307876ac",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 408,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T17:11:15Z",
      "side": 1,
      "message": "tried it, python does not seem to have ++",
      "parentUuid": "511fd0c1_0889fcce",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d4cff3c_4b0195e5",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 408,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T19:11:42Z",
      "side": 1,
      "message": "Huh! TIL",
      "parentUuid": "5c075724_307876ac",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "526b4ff7_231c7853",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 410,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2024-09-06T15:59:14Z",
      "side": 1,
      "message": "Nit: This entire block is repeated just below, can we avoid this with a lambda or a reworked control flow?",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e7e3e5b_76d6265d",
        "filename": "scm.py",
        "patchSetId": 19
      },
      "lineNbr": 410,
      "author": {
        "id": 1606504
      },
      "writtenOn": "2024-09-06T17:11:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "526b4ff7_231c7853",
      "revId": "d82820fe84986b00336030f57e79391c4950b497",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}