{
  "comments": [
    {
      "key": {
        "uuid": "948886ac_666b1548",
        "filename": "gclient.py",
        "patchSetId": 8
      },
      "lineNbr": 2800,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-13T22:29:41Z",
      "side": 1,
      "message": "yay!!",
      "range": {
        "startLine": 2800,
        "startChar": 11,
        "endLine": 2800,
        "endChar": 18
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1f78c7b_fe7f1e5b",
        "filename": "git_cache.py",
        "patchSetId": 8
      },
      "lineNbr": 468,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-13T22:29:41Z",
      "side": 1,
      "message": "why not \n\n   with lockfile.Lock(self.mirror_path, lock_timeout):\n\n?\n\nAlso, what\u0027s the behavior with the lock timeout? Now that you\u0027re using proper lock files, maybe just let the OS deal with lock lifecycle?",
      "range": {
        "startLine": 468,
        "startChar": 4,
        "endLine": 468,
        "endChar": 21
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "334331e1_d607351c",
        "filename": "git_cache.py",
        "patchSetId": 8
      },
      "lineNbr": 468,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-13T23:42:18Z",
      "side": 1,
      "message": "OS doesn\u0027t support lock timeout as far as I can tell (just wait indefinitely or fail now). One option would be to wait indefinitely and have another thread that will kill the operation. But it complicates the code even more, and I don\u0027t think it adds any value.",
      "parentUuid": "e1f78c7b_fe7f1e5b",
      "range": {
        "startLine": 468,
        "startChar": 4,
        "endLine": 468,
        "endChar": 21
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bedcb9e4_b0ea4547",
        "filename": "git_cache.py",
        "patchSetId": 8
      },
      "lineNbr": 620,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-13T22:29:41Z",
      "side": 1,
      "message": "yay!",
      "range": {
        "startLine": 620,
        "startChar": 26,
        "endLine": 620,
        "endChar": 30
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0d3286b_4f1dd453",
        "filename": "git_cache.py",
        "patchSetId": 8
      },
      "lineNbr": 714,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-13T22:29:41Z",
      "side": 1,
      "message": "yay!!",
      "range": {
        "startLine": 714,
        "startChar": 4,
        "endLine": 714,
        "endChar": 13
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c674ce37_bf3d9654",
        "filename": "lockfile.py",
        "patchSetId": 8
      },
      "lineNbr": 1,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-13T22:29:41Z",
      "side": 1,
      "message": "no main function \u003d\u003d no shebang (and make sure this is -x, too)",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "202d3360_f8d1d05f",
        "filename": "lockfile.py",
        "patchSetId": 8
      },
      "lineNbr": 1,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-13T23:42:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c674ce37_bf3d9654",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6c8a1f8_f732cf43",
        "filename": "lockfile.py",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-13T22:29:41Z",
      "side": 1,
      "message": "Probably need to make sure to remove pywin32 from the vpython file as well?",
      "range": {
        "startLine": 16,
        "startChar": 9,
        "endLine": 16,
        "endChar": 15
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50b94141_b40b11eb",
        "filename": "lockfile.py",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-13T23:42:18Z",
      "side": 1,
      "message": "It was introduced in previous patch set, it\u0027s gone with this one.",
      "parentUuid": "b6c8a1f8_f732cf43",
      "range": {
        "startLine": 16,
        "startChar": 9,
        "endLine": 16,
        "endChar": 15
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92c91187_da320101",
        "filename": "lockfile.py",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-13T22:29:41Z",
      "side": 1,
      "message": "note that you could check this conditional at a higher level in the code, too, e.g.:\n\nif sys.platform.startswith(\u0027win\u0027):\n  class WinLockfile(object):\n    ...\n  Lockfile \u003d WinLockfile\n\nelse:\n  class PosixLockfile(object):\n    ...\n\n  Lockfile \u003d PosixLockfile\n\nThen you don\u0027t need to interleave the two of them.",
      "range": {
        "startLine": 50,
        "startChar": 12,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c057541_67906deb",
        "filename": "lockfile.py",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-13T23:42:18Z",
      "side": 1,
      "message": "Totally, it makes it much cleaner.",
      "parentUuid": "92c91187_da320101",
      "range": {
        "startLine": 50,
        "startChar": 12,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e3bfdb8_b39dbdef",
        "filename": "lockfile.py",
        "patchSetId": 8
      },
      "lineNbr": 149,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-13T22:29:41Z",
      "side": 1,
      "message": "I would strongly consider just implementing the api of\n\n  @contextlib.contextmanager\n  def lock(path):\n    ...\n\nInstead of having the Lockfile classes; the use of the lockfile in git_cache always generates the class immediately before use and then discards it anyway.\n\nYou could still have the classes, if it helps organize the code, but they could be private.\n\nI\u0027m also not sure it\u0027s worth tracking stuff like \u0027is_locked\u0027 either.",
      "range": {
        "startLine": 149,
        "startChar": 6,
        "endLine": 149,
        "endChar": 10
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "018f520c_a86fcab0",
        "filename": "lockfile.py",
        "patchSetId": 8
      },
      "lineNbr": 149,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-13T23:42:18Z",
      "side": 1,
      "message": "Should be addressed in the new patch set.",
      "parentUuid": "9e3bfdb8_b39dbdef",
      "range": {
        "startLine": 149,
        "startChar": 6,
        "endLine": 149,
        "endChar": 10
      },
      "revId": "5f3fed73ca3af737dd0c1f05fe7515f1f6e876bc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}