{
  "comments": [
    {
      "key": {
        "uuid": "925b73ab_9b983b51",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 1684,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-03-23T19:02:01Z",
      "side": 1,
      "message": "and this...",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9afab9f_1473b921",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 1825,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-03-23T17:14:17Z",
      "side": 1,
      "message": "the only important docstring is here.",
      "range": {
        "startLine": 1825,
        "startChar": 6,
        "endLine": 1825,
        "endChar": 29
      },
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec7f6b1a_1235061f",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 1835,
      "author": {
        "id": 1002100
      },
      "writtenOn": "2017-03-23T17:28:37Z",
      "side": 1,
      "message": "It isn\u0027t clear to me why this one is \u0027pass\u0027 instead of \u0027raise NotImplementedError\u0027 like all the others. Make the abstract base class truly abstract.",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "369fea72_f8d1a537",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 1835,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-03-23T19:02:01Z",
      "side": 1,
      "message": "because having no implementation for this one is not wrong. That said, i fixed htis.",
      "parentUuid": "ec7f6b1a_1235061f",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "022f80ba_242d0b49",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 1852,
      "author": {
        "id": 1002100
      },
      "writtenOn": "2017-03-23T17:28:37Z",
      "side": 1,
      "message": "Some of these don\u0027t have docstrings. If all the docstrings should be in the base class, then *all* the docstrings should be in the base class.",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f777d5d_2c8cab00",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 1852,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-03-23T19:02:01Z",
      "side": 1,
      "message": "it\u0027s more complicated: there is also GetIssueOwner in Changelist class itself, and that\u0027s where I documented it.\n\nI still don\u0027t yet have a good object model for Changelist. If you have ideas, LMK.\n\nCurrently I have:\nclass Changelist:\n  # which has \n  self._codereview_impl \n  # which is instance of either:\n  _RietveldChangelistImpl or _GerritChangelistImpl\n\nSome methods are defined on Changelist but are immediately propagated to _coderview_impl (like GetIssueOwner)\nOthers like EnsureCanUploadPatchset are not defined on Changelist because they were originally supposed to be called only from inside Changelist itself.\nHowever, there is __getattr__ magic to forward undefined attrs of Changelist to `codereview_impl`, and the same thing backwards. This was the only way I knew to let me add Gerrit specific code without breaking existing Rietveld and a more readable form then if conditions.\nThe problem with these __getattr__ is that now even Gerrit code relies on it.",
      "parentUuid": "022f80ba_242d0b49",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae3d0887_a2548f40",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 2402,
      "author": {
        "id": 1002100
      },
      "writtenOn": "2017-03-23T16:58:48Z",
      "side": 1,
      "message": "Don\u0027t remove this docstring.",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af6bffd2_bc564e17",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 2402,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-03-23T17:14:17Z",
      "side": 1,
      "message": "IMO, keeping two of the doc strings in sync is hard, and i\u0027d rather have no doc here than have to conflicting docs.",
      "parentUuid": "ae3d0887_a2548f40",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fde57687_7b0338f9",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 2402,
      "author": {
        "id": 1002100
      },
      "writtenOn": "2017-03-23T17:28:37Z",
      "side": 1,
      "message": "I agree in languages like Java where you mark \"@override\". But these classes are sufficiently complex that it isn\u0027t always obvious which methods are class-specific and which are implementations of the base class. At the very least, that should be noted.",
      "parentUuid": "af6bffd2_bc564e17",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17cca0be_f5debcd4",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 2402,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-03-23T19:02:01Z",
      "side": 1,
      "message": "I orient myself this way: all non-protected (not _xxx) are overrides. Protected ones though could be both, maybe I should have used __ for really private ones like _GetChangeDetail().\nStill, ptal at my reply on line 1852. I don\u0027t mind adding @override or smth like that, but then for every method in both Rietveld and Gerrit implementations AND in a follow up CL.",
      "parentUuid": "fde57687_7b0338f9",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd95b58c_25f02030",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 2434,
      "author": {
        "id": 1002100
      },
      "writtenOn": "2017-03-23T16:58:48Z",
      "side": 1,
      "message": "This whole warning thing is multiple round-trips to the server. Maybe put the whole thing inside \"if not force\", instead of just the confirm prompt? That would speed up execution for folks who are (probably) trying to be speedy. Or not, either way, just an idea.",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b10a929c_6023b691",
        "filename": "git_cl.py",
        "patchSetId": 2
      },
      "lineNbr": 2434,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-03-23T17:14:17Z",
      "side": 1,
      "message": "Good point. I thought of round trips too - see warming of cache above and that why I first check .gitcookies, but your idea is a good one, too.",
      "parentUuid": "dd95b58c_25f02030",
      "revId": "91aac0ce73d941daf76eb8541db0c97a6a249203",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}