{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d60506f3_a421c470",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1381059
      },
      "writtenOn": "2024-06-05T21:04:14Z",
      "side": 1,
      "message": "removing myself from the reviewer as it looks like there are enough source ppl on this CL already. Sorry for the delayed review due to trooper and being sick",
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5362afdb_0f2dea1d",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 46,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T01:24:09Z",
      "side": 1,
      "message": "its",
      "range": {
        "startLine": 46,
        "startChar": 43,
        "endLine": 46,
        "endChar": 47
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa1ccc3f_04445da1",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 46,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T22:48:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5362afdb_0f2dea1d",
      "range": {
        "startLine": 46,
        "startChar": 43,
        "endLine": 46,
        "endChar": 47
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0f55441_cf0ef6d4",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 56,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T01:24:09Z",
      "side": 1,
      "message": "I would reorder a bit.\n\n```\n# HACK: httplib2 has significant bugs with its proxy support in python3.\n# httplib2.socks.socksocket.__rewriteproxy does not properly expect bytes\n# as it\u0027s argument instead of str. It\u0027s also inherently buggy, as it ...\n#\n# httplib2 code should be rewritten to just use python stdlib  ...\n# Until the rewrite happens, we will directly patch the buggy\n# implementation ...\n```",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70edd239_99fb42b6",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 56,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T23:09:12Z",
      "side": 1,
      "message": "I spent too much time comparing the two and honestly IMO I don\u0027t feel there\u0027s a significant difference between the two so I\u0027ll keep the current version it as-is.",
      "parentUuid": "b0f55441_cf0ef6d4",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 56,
        "endChar": 52
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bb4cf44_22e1c0c6",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 62,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T01:24:09Z",
      "side": 1,
      "message": "At a glance, it looks the same as the following code. Can you help me understand why this is needed?\n\nhttps://github.com/jcgregorio/httplib2/blob/010b4e399c04a199e7ca25995286f3db0337500d/python2/httplib2/socks.py#L153",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 62,
        "endChar": 25
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f71adab5_b0579116",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 62,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T23:09:12Z",
      "side": 1,
      "message": "Looks like the problem is using bytes instead of string",
      "parentUuid": "3bb4cf44_22e1c0c6",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 62,
        "endChar": 25
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6de7e84f_10df9f5e",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 80,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T01:24:09Z",
      "side": 1,
      "message": "this indent style looks a bit unusual. please consider the AI generated (or anything else) style",
      "range": {
        "startLine": 79,
        "startChar": 73,
        "endLine": 80,
        "endChar": 18
      },
      "fixSuggestions": [
        {
          "fixId": "c300c1b8_d6afbb4b",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "gerrit_util.py",
              "range": {
                "startLine": 79,
                "startChar": 0,
                "endLine": 81,
                "endChar": 0
              },
              "replacement": "        if (self._socksocket__proxy[4] !\u003d None and\n                self._socksocket__proxy[5] !\u003d None):\n"
            }
          ]
        }
      ],
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "884a528b_ee755aa2",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 80,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T22:48:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6de7e84f_10df9f5e",
      "range": {
        "startLine": 79,
        "startChar": 73,
        "endLine": 80,
        "endChar": 18
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2cb70c8d_2b71bf13",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 199,
      "author": {
        "id": 1367998
      },
      "writtenOn": "2024-06-05T00:33:43Z",
      "side": 1,
      "message": "could you also add tests for this?",
      "range": {
        "startLine": 199,
        "startChar": 6,
        "endLine": 199,
        "endChar": 22
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9132c8ef_5dd7c19d",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 199,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T22:48:57Z",
      "side": 1,
      "message": "For which part?  IMO the implementation is extremely stateful which makes it unsuitable for useful unit tests.  Integration tests are hard since it depends on the sso helper.  And I\u0027m against heavily mocked tests; they do more harm than good.",
      "parentUuid": "2cb70c8d_2b71bf13",
      "range": {
        "startLine": 199,
        "startChar": 6,
        "endLine": 199,
        "endChar": 22
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65fcdbc1_ce7d6e45",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 201,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T01:24:09Z",
      "side": 1,
      "message": "Shouldn\u0027t this be a one line?",
      "range": {
        "startLine": 200,
        "startChar": 7,
        "endLine": 201,
        "endChar": 68
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69617432_7a355699",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 201,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T22:48:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65fcdbc1_ce7d6e45",
      "range": {
        "startLine": 200,
        "startChar": 7,
        "endLine": 201,
        "endChar": 68
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09fdbad3_a038ed30",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 203,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T01:24:09Z",
      "side": 1,
      "message": "nit; the AI claims that the preferred and most widely accepted spelling is \"publicly.\"",
      "range": {
        "startLine": 203,
        "startChar": 34,
        "endLine": 203,
        "endChar": 44
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7ab0985_3145137b",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 203,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T22:48:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09fdbad3_a038ed30",
      "range": {
        "startLine": 203,
        "startChar": 34,
        "endLine": 203,
        "endChar": 44
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dfab7ae_95288d08",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 206,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T01:24:09Z",
      "side": 1,
      "message": "nit; I just feel these might be too much detailed info. I wonder if these are necessary background contexts for this class implementation.",
      "range": {
        "startLine": 204,
        "startChar": 4,
        "endLine": 206,
        "endChar": 50
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07a620e2_205cf470",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 206,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T23:09:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4dfab7ae_95288d08",
      "range": {
        "startLine": 204,
        "startChar": 4,
        "endLine": 206,
        "endChar": 50
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e64eb0a_4662d258",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 216,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T22:48:57Z",
      "side": 1,
      "message": "eh, do people use this?",
      "range": {
        "startLine": 216,
        "startChar": 22,
        "endLine": 216,
        "endChar": 29
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae5580bc_aa525d4f",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 308,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-06T22:23:59Z",
      "side": 1,
      "message": "This misleads audiences, and possibly incorrect information.\n\n1. Based on the behaviour explained in another comment, git-remote-sso will close its stdout without existing. i.e., it may or may not exit by itself.\n2. L326 cancels the timer.\n3. In other words, the killing happens only if it takes \u003e 5 secs to run the command, get the output, and parse the output.\n\nHowever, the comment sounds like it will parse stdout and consume the cookfile in the case of timeout, as killing the process is only performed in case of timeout.",
      "range": {
        "startLine": 307,
        "startChar": 12,
        "endLine": 308,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67eca087_646a128e",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 308,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-06T23:12:37Z",
      "side": 1,
      "message": "Please see latest patchset (and comment if you\u0027re still unsatisfied).",
      "parentUuid": "ae5580bc_aa525d4f",
      "range": {
        "startLine": 307,
        "startChar": 12,
        "endLine": 308,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed5e47c6_df6cfe23",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 324,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-06T22:23:59Z",
      "side": 1,
      "message": "Technically, this is racy and should use a lock to protect access to `timedout`.\nFor example, let\u0027s say that\n- proc.stdout.read() took 4 secs\n- CLs._parse_config() took 2 secs\n\nAlthough the command succeeded, the timer will send SIGKILL to the process while CLs._parse_config() is called, and L328 will falsely treat it as timeout. Also, it can possibly suffer from memory fence issue. Upon searches, cpython can also have memory fence issues.  in short, this should use mutex to protect access to `timedout`.",
      "range": {
        "startLine": 324,
        "startChar": 20,
        "endLine": 324,
        "endChar": 63
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11ff5e1d_33580049",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T01:24:09Z",
      "side": 1,
      "message": "subprocess2 supports timeout 😊\nhttps://github.com/kata198/python-subprocess2?tab\u003dreadme-ov-file#popen\n\n```\nwith subprocess.Popen(...) as proc:\n  try:\n    result \u003d subprocess2.waitOrTerminate(proc, timeout_seconds)\n    if result.returncode \u003d\u003d 0:\n      ret \u003d CLs._parse_config(result.stdout.decode(\"utf-8\")\n    else:\n      ...(failed)...\n  except subprocess2.TimeoutExpired:\n    ...\n```",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7952fda_3456637c",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-05T22:52:12Z",
      "side": 1,
      "message": "Looks like it only supports synchronous timeout?",
      "parentUuid": "11ff5e1d_33580049",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72e2545d_ec5871f5",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-05T23:28:29Z",
      "side": 1,
      "message": "Can you elaborate more? In the existing code, the python process would be blocked at `proce.stdout.read()` until the popen process terminates (or closes the stdout pipe)\n\nIn other words, the python wouldn\u0027t do anything else other than monitoring the timeout while the spawned process is running. What do you mean by synchronous timeout?",
      "parentUuid": "f7952fda_3456637c",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f11d931_80cdff66",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-06T01:15:44Z",
      "side": 1,
      "message": "The output needs to be read and processed before the process terminates.\n\ntl;dr the process writes a file and prints the path to stdout, then deletes the file when it exits.  We need to read the file path and parse the file while the process has not exited.",
      "parentUuid": "72e2545d_ec5871f5",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25bef8bd_34df5e9d",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-06T01:24:00Z",
      "side": 1,
      "message": "proc.stdout.read() blocks until EOF. If the intent is to read and process the stream before the command terminates (or closed the stdout pipe), then you need to specify bytes or use different functions.",
      "parentUuid": "2f11d931_80cdff66",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7dc0f3d_faaf75f2",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-06T01:38:08Z",
      "side": 1,
      "message": "From what iannucci said, the process closes stdout, but waits around.",
      "parentUuid": "25bef8bd_34df5e9d",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c7af940_caad1de2",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-06T01:57:41Z",
      "side": 1,
      "message": "do you have a link? Or, it was said in chat or in-person, can you share the reason?\n\nIt doesn\u0027t sound right to me. It will always keep the process for 5 secs and kill the process by SIGKILL. It will make the execution command run for 5 secs, even if git-remote-sso prints the output in 0.5s.",
      "parentUuid": "a7dc0f3d_faaf75f2",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39df391a_7618f8d5",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-06T02:02:22Z",
      "side": 1,
      "message": "let me correct myself. If it closes stdout, then read() will return immediately and this python process wouldn\u0027t wait for the command to finish. Still, this is not a usual behaviour, and this code should explain about it. A link to the reasoning behind would be helpful. For instance, this will likely leave the process running behind, but it will close the stdout. (I believe it should document the reason of the behaviour, if so)",
      "parentUuid": "5c7af940_caad1de2",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92a113d0_ab19d8cb",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-06T21:45:22Z",
      "side": 1,
      "message": "ack, the implementation wasn\u0027t entirely complete so I\u0027ve fixed it.  The wonky behavior still stands however.  The existing comment explains it IMO but I\u0027ve expanded that as well, ptal",
      "parentUuid": "39df391a_7618f8d5",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "322850bd_68cfeb76",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 1147264
      },
      "writtenOn": "2024-06-06T22:23:59Z",
      "side": 1,
      "message": "I\u0027m not sure if we are on the same page. Please help me find where the comments are, explaining the following.\n- git-sso-remote closes the stdout without terminating.\n- gclient kills the spawned process only if it takes \u003e 5 secs.\n- the process would continue running, but it will probably exit by itself when the gclient main process terminates.\n- closing stdout without terminating is the behaviour of git-sso-remote.",
      "parentUuid": "92a113d0_ab19d8cb",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc21ee5d_50d62a5d",
        "filename": "gerrit_util.py",
        "patchSetId": 23
      },
      "lineNbr": 326,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-06-06T23:11:22Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure if we are on the same page. Please help me find where the comments are, explaining the following.\n\u003e - git-sso-remote closes the stdout without terminating.\n\n```\n            # 2. writes config to stdout, and closes stdout\n            # 3. waits for stdin to be closed\n```\n\n\u003e - gclient kills the spawned process only if it takes \u003e 5 secs.\n\nThis is in the code, I don\u0027t think we really need a comment for it?\n\n\u003e - the process would continue running, but it will probably exit by itself when the gclient main process terminates.\n\nIt doesn\u0027t?  Are you looking at an old patchset (or if you spotted a bug please point it out)\n\n\u003e - closing stdout without terminating is the behaviour of git-sso-remote.\n\n```\n            # 2. writes config to stdout, and closes stdout\n            # 3. waits for stdin to be closed\n```",
      "parentUuid": "322850bd_68cfeb76",
      "range": {
        "startLine": 309,
        "startChar": 12,
        "endLine": 326,
        "endChar": 34
      },
      "revId": "9b33f3d267463259d2e8fcb8dc69b21060b939cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}