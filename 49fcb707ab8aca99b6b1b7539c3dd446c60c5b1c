{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f955281b_d247add3",
        "filename": "reclient_helper.py",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1366072
      },
      "writtenOn": "2023-04-21T00:43:42Z",
      "side": 1,
      "message": "Does this mean `reproxy.creds` is stored for each out_dir?",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 32
      },
      "revId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d57bdc5b_200cbd2a",
        "filename": "reclient_helper.py",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1544499
      },
      "writtenOn": "2023-04-21T16:41:24Z",
      "side": 1,
      "message": "Yes, this is because each reproxy instance is scoped to a single output directory as we do not support multiple reproxy instances using the same cache directory at the same time which could happen if we had a shared cache dir. The reproxy.creds file is very small so I dont think this is a problem",
      "parentUuid": "f955281b_d247add3",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 32
      },
      "revId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8b4c474_c2a0534c",
        "filename": "reclient_helper.py",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1366072
      },
      "writtenOn": "2023-04-24T00:52:51Z",
      "side": 1,
      "message": "I see. This means developers would have to authenticate for each build directory.\nIMO, developers should reuse the same `reproxy.creds`. \n(The size of `reproxy.creds` is not a problem. )\n\nCan only `reproxy.creds` be stored in another directory?\nWDYT?",
      "parentUuid": "d57bdc5b_200cbd2a",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 32
      },
      "revId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f352c61_3c71bb70",
        "filename": "reclient_helper.py",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1544499
      },
      "writtenOn": "2023-04-24T12:51:52Z",
      "side": 1,
      "message": "`reproxy.creds` does not prevent users from having to reauthenticate. It just stores a token for up to 1 hour so that we dont have to call `gcloud auth print-access-token` or the loas cred exchange as often, this saves 1-5s on subsequent builds. \nIf the user is already logged in and their reauth has not expired `gcloud auth print-access-token` or the loas cred exchange will just return the access token with no auth flow.\nSo each for each build directory `gcloud auth print-access-token` or the loas cred exchange will need to be run once per hour. This should not be a problem. \nThe reauth flow is only triggered by gcloud when we call `gcloud auth print-access-token` AND reauth has already expired (so after 20h), for loas we call `gcert` only if the credential exchange returns an auth error.",
      "parentUuid": "b8b4c474_c2a0534c",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 32
      },
      "revId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef20949b_9cf20ea0",
        "filename": "reclient_helper.py",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1544499
      },
      "writtenOn": "2023-04-24T12:54:33Z",
      "side": 1,
      "message": "My concern with having `reproxy.creds` in another directory is that would require yet another flag for reproxy and yet another place where reproxy artifacts can be found. Also we would need to refactor our logic to use some file locks to ensure that multiple reproxy instances could read/write to the same `reproxy.creds` file\nI feel that is overkill.",
      "parentUuid": "8f352c61_3c71bb70",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 32
      },
      "revId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4961ee7e_cc339878",
        "filename": "reclient_helper.py",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1366072
      },
      "writtenOn": "2023-04-24T19:34:58Z",
      "side": 1,
      "message": "Oh, I see. Thank you for your clarification!",
      "parentUuid": "ef20949b_9cf20ea0",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 32
      },
      "revId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "49fcb707ab8aca99b6b1b7539c3dd446c60c5b1c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}