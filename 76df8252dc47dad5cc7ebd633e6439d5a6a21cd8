{
  "comments": [
    {
      "key": {
        "uuid": "2e0aef3a_1d857039",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 499,
      "author": {
        "id": 1167909
      },
      "writtenOn": "2018-08-29T18:35:07Z",
      "side": 1,
      "message": "What if //DEPS includes //foo/DEPS and //bar/DEPS, and both of them have //third_party/baz in their deps dict?",
      "range": {
        "startLine": 499,
        "startChar": 18,
        "endLine": 499,
        "endChar": 31
      },
      "revId": "76df8252dc47dad5cc7ebd633e6439d5a6a21cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "007c8b03_87ceccc7",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 499,
      "author": {
        "id": 1286313
      },
      "writtenOn": "2018-08-29T19:05:38Z",
      "side": 1,
      "message": "Yeah I\u0027ve dismissed this scenario (YAGNI principle again!).\nThe idea is that we don\u0027t *need* to move all dependencies in the modules which use them.\nWe would only require the \u0027borrowed\u0027 modules (//build, //testing, ...) to have their own DEPS files.\n\nAs a consequence, this scenario is less likely. If the need arises, we can introduce the defer mechanism suggested by Patrik in the design doc, or maybe we\u0027ll have an even better option by then.",
      "parentUuid": "2e0aef3a_1d857039",
      "range": {
        "startLine": 499,
        "startChar": 18,
        "endLine": 499,
        "endChar": 31
      },
      "revId": "76df8252dc47dad5cc7ebd633e6439d5a6a21cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67e46b3b_49302ab7",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 499,
      "author": {
        "id": 1167909
      },
      "writtenOn": "2018-08-29T19:39:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "007c8b03_87ceccc7",
      "range": {
        "startLine": 499,
        "startChar": 18,
        "endLine": 499,
        "endChar": 31
      },
      "revId": "76df8252dc47dad5cc7ebd633e6439d5a6a21cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b0045bb_fc816f89",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 512,
      "author": {
        "id": 1167909
      },
      "writtenOn": "2018-08-29T18:35:07Z",
      "side": 1,
      "message": "What if //DEPS includes //foo/DEPS and //bar/DEPS, and both of them have to run the same hook (maybe because they have a common dependency)?\n\nDo we need hooks to support //src/build?",
      "range": {
        "startLine": 512,
        "startChar": 26,
        "endLine": 512,
        "endChar": 31
      },
      "revId": "76df8252dc47dad5cc7ebd633e6439d5a6a21cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41acaa94_b556adfb",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 516,
      "author": {
        "id": 1167909
      },
      "writtenOn": "2018-08-29T18:35:07Z",
      "side": 1,
      "message": "I think we should be a lot more restrictive in what we support. I don\u0027t think we need to support things like allowed_hosts, gclient_gn_args, gclient_gn_args_file, etc.\n\n  if name \u003d\u003d \u0027vars\u0027 || name \u003d\u003d \u0027deps\u0027:\n    ...\n  elif name \u003d\u003d \u0027hooks\u0027:  # If hooks are even needed\n    ...\n  else:\n    # Error out: Not supported.",
      "range": {
        "startLine": 516,
        "startChar": 6,
        "endLine": 516,
        "endChar": 10
      },
      "revId": "76df8252dc47dad5cc7ebd633e6439d5a6a21cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd8cad87_6e16396a",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 516,
      "author": {
        "id": 1002301
      },
      "writtenOn": "2018-08-30T09:48:48Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "41acaa94_b556adfb",
      "range": {
        "startLine": 516,
        "startChar": 6,
        "endLine": 516,
        "endChar": 10
      },
      "revId": "76df8252dc47dad5cc7ebd633e6439d5a6a21cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ade51f80_90a4d3f5",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 1002301
      },
      "writtenOn": "2018-08-30T09:48:48Z",
      "side": 1,
      "message": "Raise an exception instead, no?",
      "range": {
        "startLine": 575,
        "startChar": 6,
        "endLine": 575,
        "endChar": 19
      },
      "revId": "76df8252dc47dad5cc7ebd633e6439d5a6a21cd8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}