{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9c823f0e_664b5cc2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-16T19:48:23Z",
      "side": 1,
      "message": "Fixed a few tests, including adding the new mock to the SSO tests in gerrit_util_test",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16a7cf98_c3209912",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 69,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "Might just be me, but it took me a bit to understand what this means.\n\nSuggest:  The caller must not mutate the returned mapping.",
      "range": {
        "startLine": 69,
        "startChar": 8,
        "endLine": 69,
        "endChar": 32
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4beeac5d_d39490bf",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 69,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16a7cf98_c3209912",
      "range": {
        "startLine": 69,
        "startChar": 8,
        "endLine": 69,
        "endChar": 32
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bdfac60_b6899d57",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "Can we make (some of) these keyword only args?",
      "range": {
        "startLine": 73,
        "startChar": 47,
        "endLine": 73,
        "endChar": 57
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "623dacfe_edad30ba",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bdfac60_b6899d57",
      "range": {
        "startLine": 73,
        "startChar": 47,
        "endLine": 73,
        "endChar": 57
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "044858ac_c63e4330",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 84,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "Missing default value?",
      "range": {
        "startLine": 84,
        "startChar": 33,
        "endLine": 84,
        "endChar": 53
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8329292e_cc4052a9",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 84,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "This base class isn\u0027t \u0027porcelain\u0027 - I wanted all the callers to directly set a real value for each argument.\n\nOtherwise we have a double source of default values (on the public interface and on this underlying interface)",
      "parentUuid": "044858ac_c63e4330",
      "range": {
        "startLine": 84,
        "startChar": 33,
        "endLine": 84,
        "endChar": 53
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65d20300_aa700a99",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 103,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 103,
        "startChar": 32,
        "endLine": 103,
        "endChar": 38
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb38ba1d_8c1c3dbe",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 103,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65d20300_aa700a99",
      "range": {
        "startLine": 103,
        "startChar": 32,
        "endLine": 103,
        "endChar": 38
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93ee677b_adc17391",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 113,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "inherit from object?  We should at least maintain consistency",
      "range": {
        "startLine": 113,
        "startChar": 24,
        "endLine": 113,
        "endChar": 27
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83f669df_3f37602b",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 113,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "#python2Things",
      "parentUuid": "93ee677b_adc17391",
      "range": {
        "startLine": 113,
        "startChar": 24,
        "endLine": 113,
        "endChar": 27
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6657fc17_22430b4d",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 131,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "use assert?  I don\u0027t think you\u0027re supposed to raise AssertionError directly",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f97c9b36_9331959d",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 131,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "I don\u0027t like assert because it can be completely bypassed with a command line flag... that said, this check is no longer necessary because the base classes don\u0027t have direct access to _config and returning None would be a contract violation.",
      "parentUuid": "6657fc17_22430b4d",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e9f8f208_71ee53b4",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 156,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "tangent: this behavior is wrong wrt Git, which recognizes yes, true, 1, on",
      "range": {
        "startLine": 156,
        "startChar": 30,
        "endLine": 156,
        "endChar": 40
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4771f03_17bd22b9",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 168,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "I think this should be search() not match()?",
      "range": {
        "startLine": 168,
        "startChar": 17,
        "endLine": 168,
        "endChar": 22
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e96c7475_41689250",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 168,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "It was match before - I think match is clearer though? Do we have a use case for this where the caller doesn\u0027t supply the full key pattern?",
      "parentUuid": "b4771f03_17bd22b9",
      "range": {
        "startLine": 168,
        "startChar": 17,
        "endLine": 168,
        "endChar": 22
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca38417c_55ef5d5d",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 238,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "This paragraph should be relocated?",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a1bb6c7_951708f3",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 238,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca38417c_55ef5d5d",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16392bd2_63fa6197",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 294,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "missing default value?",
      "range": {
        "startLine": 294,
        "startChar": 23,
        "endLine": 294,
        "endChar": 36
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc7c8c7f_31ff44ed",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 294,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16392bd2_63fa6197",
      "range": {
        "startLine": 294,
        "startChar": 23,
        "endLine": 294,
        "endChar": 36
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f10a405_e0b19c51",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 295,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "nit: might be worth naming `Dict[str, List[str]]` since it\u0027s used all over.  I don\u0027t remember how \"type aliases\" work in Python though",
      "range": {
        "startLine": 295,
        "startChar": 52,
        "endLine": 295,
        "endChar": 72
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2370a914_45668640",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 295,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f10a405_e0b19c51",
      "range": {
        "startLine": 295,
        "startChar": 52,
        "endLine": 295,
        "endChar": 72
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25cdbed7_bb868f11",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 296,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "Missing init call?",
      "range": {
        "startLine": 296,
        "startChar": 8,
        "endLine": 296,
        "endChar": 13
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8a2fcde_c158c4ea",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 296,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "oops, done",
      "parentUuid": "25cdbed7_bb868f11",
      "range": {
        "startLine": 296,
        "startChar": 8,
        "endLine": 296,
        "endChar": 13
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bac2953e_02ab527a",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 297,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "type annotation?",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 18
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5332dfd_29c1c699",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 297,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T18:34:40Z",
      "side": 1,
      "message": "Done - also made it clear that initial_state is an immutable mapping/sequence and state is mutable (so, we now do a copy)",
      "parentUuid": "bac2953e_02ab527a",
      "range": {
        "startLine": 297,
        "startChar": 15,
        "endLine": 297,
        "endChar": 18
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2ca2686_c33acf12",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 308,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "Seems like it\u0027d be easier to assign indexes to the scopes and use a list for the scopes rather than a dict?\n\nalso https://docs.python.org/3/library/collections.html#collections.ChainMap\n\nI think you can create chain maps for each scope and share the underlying dicts between them as needed.\n\nMaybe subclassing it so it merges lists properly",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4175b6ad_361d5eaf",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 308,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T19:54:46Z",
      "side": 1,
      "message": "Missed this - I think I can also use the python3 enum construct for this, which would be better.",
      "parentUuid": "a2ca2686_c33acf12",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34ec4939_235a256f",
        "filename": "scm.py",
        "patchSetId": 9
      },
      "lineNbr": 368,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "same comment on match vs search",
      "range": {
        "startLine": 368,
        "startChar": 46,
        "endLine": 368,
        "endChar": 51
      },
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45cbd2fc_5345c159",
        "filename": "tests/gerrit_util_test.py",
        "patchSetId": 9
      },
      "lineNbr": 729,
      "author": {
        "id": 3355336
      },
      "writtenOn": "2024-07-16T21:48:47Z",
      "side": 1,
      "message": "I\u0027d prefer properly tracking and cleaning up all the patches, rather than doing stopall",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cff94a1d_dfcfb29f",
        "filename": "tests/gerrit_util_test.py",
        "patchSetId": 9
      },
      "lineNbr": 729,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2024-07-17T19:54:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45cbd2fc_5345c159",
      "revId": "d80e9e8f61dac0a0239c91df68b5956c964ed380",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}