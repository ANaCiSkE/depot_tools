{
  "comments": [
    {
      "key": {
        "uuid": "6c60d37a_3d07fafd",
        "filename": "subprocess2.py",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2018-12-05T21:12:58Z",
      "side": 1,
      "message": "Please also comment that this is basically a wild guess without any known basis other than \"it might do something\"",
      "revId": "8117d8f4b313f07d8404998ef469f04cf1f85114",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17d71ece_3af966d3",
        "filename": "subprocess2.py",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1181690
      },
      "writtenOn": "2018-12-05T21:25:52Z",
      "side": 1,
      "message": "This seems uncharitable; it\u0027s based on https://github.com/python/cpython/blob/2.7/Python/codecs.c#L117 (which I can add to the comment)",
      "parentUuid": "6c60d37a_3d07fafd",
      "revId": "8117d8f4b313f07d8404998ef469f04cf1f85114",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dd85608_dad1925c",
        "filename": "subprocess2.py",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2018-12-05T21:27:11Z",
      "side": 1,
      "message": "Neither the comment nor the CL mention this :D\n\nIt still seems very far-fetched to me",
      "parentUuid": "17d71ece_3af966d3",
      "revId": "8117d8f4b313f07d8404998ef469f04cf1f85114",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a33f50c9_91ab853d",
        "filename": "subprocess2.py",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2018-12-05T21:28:56Z",
      "side": 1,
      "message": "Like, I get that python caches stuff in a bunch of places, but it doesn\u0027t answer anything about \"we assume (why?) that the codec cache is getting corrupted in the process (as opposed to actually missing codecs on disk), but at the start of the process it\u0027s not corrupt, and so we can read it here so that the cache will be hot later.\"",
      "parentUuid": "8dd85608_dad1925c",
      "revId": "8117d8f4b313f07d8404998ef469f04cf1f85114",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f607b42_5a1d7705",
        "filename": "subprocess2.py",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1181690
      },
      "writtenOn": "2018-12-05T21:35:56Z",
      "side": 1,
      "message": "You\u0027re correct that it\u0027s a guess, hence the description of this being a \"spec fix\" :)\n\nI don\u0027t think the cache is getting corrupted; I think the mechanism by which codecs are looked up (and thus the cache populated) is being interfered with later in the process. I am indeed assuming that that\u0027s happening rather than the alternative; that the string-escape codec actually flakily disappears in some scenarios. I\u0027m also assuming that the codec saved in the cache is not being reset after initial load, as I see no path by which that could happen in codecs.c.\n\nHappy to add some of this explanation to the comment here, the CL description, and/or the bug.",
      "parentUuid": "a33f50c9_91ab853d",
      "revId": "8117d8f4b313f07d8404998ef469f04cf1f85114",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6551b842_df549b73",
        "filename": "subprocess2.py",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2018-12-05T22:08:48Z",
      "side": 1,
      "message": "\u003e You\u0027re correct that it\u0027s a guess, hence the description of this being a \"spec fix\" :)\n\nYou say \"spec fix\", I say \"wild guess\" :)\n\n\u003e \n\u003e I don\u0027t think the cache is getting corrupted; I think the mechanism by which codecs are looked up (and thus the cache populated) is being interfered with later in the process. I am indeed assuming that that\u0027s happening rather than the alternative; that the string-escape codec actually flakily disappears in some scenarios. I\u0027m also assuming that the codec saved in the cache is not being reset after initial load, as I see no path by which that could happen in codecs.c.\n\u003e \n\u003e Happy to add some of this explanation to the comment here, the CL description, and/or the bug.\n\n\nI\u0027d prefer all three, because this is how we get things like: https://chromium.googlesource.com/chromium/tools/build/+/master/scripts/slave/runtest.py#30",
      "parentUuid": "1f607b42_5a1d7705",
      "revId": "8117d8f4b313f07d8404998ef469f04cf1f85114",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f87ebfb9_e7d497aa",
        "filename": "subprocess2.py",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1181690
      },
      "writtenOn": "2018-12-05T22:40:46Z",
      "side": 1,
      "message": "Wrote up an explanation in crbug.com/912292#c2 and an abbreviated explanation in the commit description. Linked to the crbug comment both in the commit description and in the comment here.",
      "parentUuid": "6551b842_df549b73",
      "revId": "8117d8f4b313f07d8404998ef469f04cf1f85114",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}