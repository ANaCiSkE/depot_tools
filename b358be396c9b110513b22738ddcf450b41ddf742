{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b062cde9_9bf96b94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1493367
      },
      "writtenOn": "2024-03-11T11:04:14Z",
      "side": 1,
      "message": "Thanks for the followup. I don\u0027t think other format tool runners other than `_RunClangFormatDiff ` support both `--diff` and `--dry-run`.",
      "revId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af3f6172_90f4ff0c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1581717
      },
      "writtenOn": "2024-03-11T13:06:15Z",
      "side": 1,
      "message": "Likely true. I don\u0027t have a strong opinion about whether that combination should be quiet like `--dry-run` or emit the diff like `--diff` alone would. The help for `gn format` to me implies `--diff --dry-run` is `--diff`, so I did that. Mainly want to make sure it doesn\u0027t incorrectly claim everything\u0027s bad :)",
      "parentUuid": "b062cde9_9bf96b94",
      "revId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c23945e_414a02cc",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 6172,
      "author": {
        "id": 1493367
      },
      "writtenOn": "2024-03-11T11:04:14Z",
      "side": 1,
      "message": "To be similar to `_RunClangFormatDiff` this should be:\n\n```\nif opts.diff:\n    sys.stdout.write(\u0027Requires formatting: \u0027 + stdout)\nif opts.dry_run:\n    return_value \u003d 2\n```\n\n`_RunYapf` also has the same issue.",
      "range": {
        "startLine": 6171,
        "startChar": 16,
        "endLine": 6172,
        "endChar": 36
      },
      "revId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08c3173e_ff69465f",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 6172,
      "author": {
        "id": 1581717
      },
      "writtenOn": "2024-03-11T13:06:15Z",
      "side": 1,
      "message": "Thanks for noticing. TBH I\u0027m not 100% I get the idea behind only reporting the error code sometimes in this. Do you think I should change that? I\u0027m a bit hesitant, esp. about chainging an separate formatter.\n\nNote that _RunGnFormat is still different, and suppresses \"diff\" output in this case...",
      "parentUuid": "4c23945e_414a02cc",
      "range": {
        "startLine": 6171,
        "startChar": 16,
        "endLine": 6172,
        "endChar": 36
      },
      "revId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9eb7a5a5_4e899055",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 6172,
      "author": {
        "id": 1493367
      },
      "writtenOn": "2024-03-11T13:58:20Z",
      "side": 1,
      "message": "I\u0027m okay with keeping this without changes to not accidentally break other edge cases :). Other formatters are all over the place, some prioritize `--dry-run`, some `--diff`.\n\nWe just need to be sure to not check the exit code when running with both flags as in many cases `--diff` will return 0 even if a format is required.",
      "parentUuid": "08c3173e_ff69465f",
      "range": {
        "startLine": 6171,
        "startChar": 16,
        "endLine": 6172,
        "endChar": 36
      },
      "revId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c39548a5_1bac9675",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 6172,
      "author": {
        "id": 1581717
      },
      "writtenOn": "2024-03-12T06:47:01Z",
      "side": 1,
      "message": "I\u0027ll leave this as-is, mainly in the interest of not changing too many things at once.",
      "parentUuid": "9eb7a5a5_4e899055",
      "range": {
        "startLine": 6171,
        "startChar": 16,
        "endLine": 6172,
        "endChar": 36
      },
      "revId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b358be396c9b110513b22738ddcf450b41ddf742",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}