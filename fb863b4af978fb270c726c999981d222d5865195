{
  "comments": [
    {
      "key": {
        "uuid": "ba2cb973_6b54497f",
        "filename": "lockfile.py",
        "patchSetId": 15
      },
      "lineNbr": 25,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-19T19:09:20Z",
      "side": 1,
      "message": "this is borderline beautiful now ðŸ˜Š",
      "range": {
        "startLine": 25,
        "startChar": 6,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "fb863b4af978fb270c726c999981d222d5865195",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "839dc13c_5e49a162",
        "filename": "lockfile.py",
        "patchSetId": 15
      },
      "lineNbr": 25,
      "author": {
        "id": 1167909
      },
      "writtenOn": "2020-05-19T20:25:44Z",
      "side": 1,
      "message": "What about defining `_create_handle(lockfile)`, `_lock_handle(handle)`, `_unlock_handle(handle)` and `_close_handle(handle)` for both win and linux.\n\nThen we could define _try_lock both on win and linux like:\n\n  def _try_lock(lockfile):\n    handle \u003d _create_handle(lockfile)\n\n    try:\n      _lock_handle(handle)\n    except:\n      _close_hadle(handle)\n      raise\n\n    def release():\n      try:\n        _unlock_handle(handle)\n      finally:\n        _close_handle(handle)",
      "parentUuid": "ba2cb973_6b54497f",
      "range": {
        "startLine": 25,
        "startChar": 6,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "fb863b4af978fb270c726c999981d222d5865195",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86b079df_8c212f96",
        "filename": "lockfile.py",
        "patchSetId": 15
      },
      "lineNbr": 25,
      "author": {
        "id": 1167909
      },
      "writtenOn": "2020-05-19T20:27:20Z",
      "side": 1,
      "message": "(send it a bit too early)\n\n  ...\n  return release\n\nI find that makes it clearer what _try_lock is doing, while leaving implementation details to each platform.",
      "parentUuid": "839dc13c_5e49a162",
      "range": {
        "startLine": 25,
        "startChar": 6,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "fb863b4af978fb270c726c999981d222d5865195",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "472a6f5e_15d4754a",
        "filename": "lockfile.py",
        "patchSetId": 15
      },
      "lineNbr": 25,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-19T20:27:23Z",
      "side": 1,
      "message": "That sounds viable to me as well",
      "parentUuid": "839dc13c_5e49a162",
      "range": {
        "startLine": 25,
        "startChar": 6,
        "endLine": 25,
        "endChar": 15
      },
      "revId": "fb863b4af978fb270c726c999981d222d5865195",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0503544e_6a37cbaf",
        "filename": "lockfile.py",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-19T19:10:14Z",
      "side": 1,
      "message": "oh this got line-wrapped weirdly; maybe move the comment above, or use `from win32imports import ...` to drop the win32imports prefix everywhere.",
      "range": {
        "startLine": 33,
        "startChar": 30,
        "endLine": 33,
        "endChar": 51
      },
      "revId": "fb863b4af978fb270c726c999981d222d5865195",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e33fd144_c8335c20",
        "filename": "lockfile.py",
        "patchSetId": 15
      },
      "lineNbr": 39,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-19T19:09:20Z",
      "side": 1,
      "message": "Probably move to the other file?\n\nAlso you probably don\u0027t need the close_handle helper now.",
      "range": {
        "startLine": 39,
        "startChar": 82,
        "endLine": 39,
        "endChar": 93
      },
      "revId": "fb863b4af978fb270c726c999981d222d5865195",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4f2f3ed_6aceee26",
        "filename": "lockfile.py",
        "patchSetId": 15
      },
      "lineNbr": 68,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-19T19:09:20Z",
      "side": 1,
      "message": "can you verify that closing the handle isn\u0027t sufficient to drop the lock? Because if it\u0027s sufficient, you can save the bother of calling UnlockFileEx.",
      "range": {
        "startLine": 68,
        "startChar": 8,
        "endLine": 68,
        "endChar": 20
      },
      "revId": "fb863b4af978fb270c726c999981d222d5865195",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}