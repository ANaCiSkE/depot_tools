{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d5023fe6_1b8f45bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2023-01-25T15:47:34Z",
      "side": 1,
      "message": "Comment removed by: Joanna Wang; Reason: redo",
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b22cfca_63a8b787",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2023-01-25T15:57:59Z",
      "side": 1,
      "message": "Is there a use-case for non-forced reapply? this could also just be `True` and save the users from typing `--force` every time they reapply.\n\nor we could save whether the initial patch was done with force in the git config, but only maybe only if users ask during dogfood.",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca0e9509_1405bd95",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2023-01-25T15:58:47Z",
      "side": 1,
      "message": "this works afaict git cl patch --reapply --force\n\nand even avoids the cherry-picking conflicts that often come up in\ngit cl patch --reapply\n\nIt was added here: https://chromium-review.googlesource.com/c/chromium/tools/depot_tools/+/538137\n\ni don\u0027t think there was any original reason for not using force with reapply.",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d985c699_96cc6615",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2023-01-25T18:57:01Z",
      "side": 1,
      "message": "agreed; but let\u0027s remove git reset --hard since force will do that.",
      "parentUuid": "ca0e9509_1405bd95",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12bcf85c_22bba640",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2023-01-25T18:57:01Z",
      "side": 1,
      "message": "Given that reapply may result in data loss already (as noted in its desc),  we can probably remove L5125 (git reset --hard) and just use force\u003dTrue.",
      "parentUuid": "1b22cfca_63a8b787",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "667a50fc_0122f0e1",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2023-01-25T20:04:33Z",
      "side": 1,
      "message": "Actually, a user may do `git cl patch \u003curl\u003e` without --force the first time, so the upstream would be w/e is the latest they\u0027ve fetched.\n\nIf we always force when they use --reapply, it would change the base commit for the above situation. \n\nand i think it might break support for these two: \n1) they may not have the base-commit locally (so they can\u0027t use --force)\n2) they may be continuing a change from a different workstation, in which case, they would not want/need to use force.\n\nDo we want to support the above?",
      "parentUuid": "12bcf85c_22bba640",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50c05e1b_ddee8461",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2023-01-25T20:22:38Z",
      "side": 1,
      "message": "\u003e 1) they may not have the base-commit locally (so they can\u0027t use --force)\n\nWhat do you mean by this base-commit? Is it the parent of the CL? If so, it will be available locally since fetch will do that part [0]\n\n\u003e 2) they may be continuing a change from a different workstation, in which case, they would not want/need to use force.\n\nAfter giving a bit more thought, I believe --force just doesn\u0027t play nicely with how depot_tools tracks branches and commits. With it, it may break local relationship chain. Other option is to always use cherry-pick, which is force\u003dfalse.\n\nFor example, let\u0027s say we have CL_A, CL_B, and CL_C. If we try to reapply CL_B with force, we would be resetting it to CL_B\u0027 (squashed commit) that has CL_A\u0027 as its parent. What happens when you make a change in CL_A and try to rebase CL_B onto it? Also, rebasing CL_C may yield interesting conflicts too.\n\nSo, perhaps we shouldn\u0027t encourage users to use --force and not set it to default.\n\n[0] https://source.chromium.org/chromium/chromium/tools/depot_tools/+/main:git_cl.py;l\u003d2490;drc\u003dc710e2d56a813d27d2368eb0e7e292bd2f59519f",
      "parentUuid": "667a50fc_0122f0e1",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd458ea9_8f57f9a0",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2023-01-25T20:28:23Z",
      "side": 1,
      "message": "not using force \u003d\u003d not using the gerrit cl\u0027s parent commit as the local parent commit when we patch it?\n\nso then wouldn\u0027t the resulting patched commit would be different from what is in gerrit?\n\nand if someone patches a coworkers CL without force, and then creates their own downstream branches, how will they be able to upload the downstream branches without uploading their coworkers CL as well?",
      "parentUuid": "50c05e1b_ddee8461",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "867253e6_7197fc82",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1237795
      },
      "writtenOn": "2023-01-25T20:33:47Z",
      "side": 1,
      "message": "oh, so we\u0027re not taking away options.force. We\u0027re just not encouraging it. As in, do what this current change is doing?",
      "parentUuid": "cd458ea9_8f57f9a0",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9446eb5_e8514744",
        "filename": "git_cl.py",
        "patchSetId": 1
      },
      "lineNbr": 5131,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2023-01-25T21:00:07Z",
      "side": 1,
      "message": "\u003e and if someone patches a coworkers CL without force, and then creates their own downstream branches, how will they be able to upload the downstream branches without uploading their coworkers CL as well?\n\n\nYeah, this looks correct - I think they would need to upload those patches and that\u0027s not desired.\n\nAnd yes - this change looks good; I forgot to +1 it.",
      "parentUuid": "867253e6_7197fc82",
      "range": {
        "startLine": 5131,
        "startChar": 38,
        "endLine": 5131,
        "endChar": 51
      },
      "revId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b5b6dd4f1163fb6e0cecaa050371cece8638981d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}