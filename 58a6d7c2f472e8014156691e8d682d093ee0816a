{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b783eca0_d057d1e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1553262
      },
      "writtenOn": "2024-04-15T22:56:41Z",
      "side": 1,
      "message": "This looks pretty good in terms of a potential interface.\n\nI guess my only questions are around the format of the key, value pairs from both the properties and `get_entries()`, for extracting in partybot, it doesn\u0027t really matter either way, but do we plan to keep the data lookup keys as they come out of the README file?\n\neg. This is what the data from `get_entries` looks like now, with the spaces between the names, capitalisation etc - it\u0027s not consistent between extractions which is why we do the lower-caseification of it in partybot. \n\nWe should pick some kind of field normalisation which is predictable on the depot_tools side and also the same between properties and raw data in get_entries.\n\n```\n{\n    \"Name\": \"BoringSSL\",\n    \"URL\": \"https://boringssl.googlesource.com/boringssl\",\n    \"Version\": \"git\",\n    \"License\": \"BSDish\",\n    \"License File\": \"src/LICENSE\",\n    \"License Android Compatible\": \"yes\",\n    \"Security Critical\": \"yes\",\n    \"Shipped\": \"yes\",\n    \"Description\": \"This is BoringSSL, a fork of OpenSSL. See\\nhttps://www.imperialviolet.org/2014/06/20/boringssl.html\"\n}\n```\n\nIn this one, `License File` is called `LICENSE File`.\n```\n{\n    \"Name\": \"An Afrikaans spellchecking dictionary\",\n    \"URL\": \"http://zaf.svn.sourceforge.net/viewvc/zaf/trunk/dict/\",\n    \"Version\": \"1.0\",\n    \"LICENSE File\": \"README-af-ZA.txt\",\n    \"Security Critical\": \"no\",\n    \"Description\": \"This folder contains a partial copy of the Afrikaans dictionary for hunspell. It consists of a dictionary file, an affix file, and a license file. (It does not include installation scripts used by Firefox.)\"\n}\n```",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05d09616_c882e25e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1378025
      },
      "writtenOn": "2024-04-17T08:24:20Z",
      "side": 1,
      "message": "My hope is partybot uses declared @property as much as possible.\n\nI think get_entries() should be contained / discouraged: Use it only for quick and dirty experiments, (e.g. data mining on a new field?). \n\nIf partybot needs to rely on a field, we should just declare the field in depot_tools and expose it properly.\n\nMy quick scan through partybot code is that, with the interface definition refactor, partybot won\u0027t be using get_entires().\n\n---\n\nOr maybe we can remove get_entires()? Returning the raw file content seems more useful for experiments.",
      "parentUuid": "b783eca0_d057d1e0",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43bf19d7_d10c66f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1553262
      },
      "writtenOn": "2024-04-17T21:38:36Z",
      "side": 1,
      "message": "I definitely think keep `get_entries()`. I don\u0027t think re-parsing the data from a raw file read, even for experiments is worthwhile for any other application using this data. If they were doing that, they might as well skip using depot_tools metadata all together and read the files themselves. \n\nThey only care about the potential contents of the field, not how to extract it. This tool has by far the best data extraction we have so I think we should keep it available. \n\nIt was just more a comment on standardising the keys between the properties and get_entries, not doing anything with the values. So whether you want the raw value from `get_entries()` or the property, you\u0027re using `license_file` as the lookup key.",
      "parentUuid": "05d09616_c882e25e",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1cbd0e2d_f24596b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1378025
      },
      "writtenOn": "2024-04-18T08:09:43Z",
      "side": 1,
      "message": "I see, I can implement a key normalization step :)\n\nRolling out wise, I think we\u0027ll need to:\n1. Roll out properties\n2. Change partybot to use properties (i.e. partybot stop using get_entries until 3 is done)\n3. Implement normalization in get_entires(), because this effectively changes the key names (i.e. a breaking change)\n4. partybot can start using get_entires(), we define get_entires() as the way to retrieve unvalidated raw values.",
      "parentUuid": "43bf19d7_d10c66f3",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "596be391_29827abb",
        "filename": "metadata/dependency_metadata.py",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1553262
      },
      "writtenOn": "2024-04-15T22:56:41Z",
      "side": 1,
      "message": "Yes, this would be ideal for this - the valid paths which actually exist. In partybot we include the src/ for clarity but we don\u0027t necessarily have to do the same here as long as we know.",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "133a21a3_c6379cd9",
        "filename": "metadata/dependency_metadata.py",
        "patchSetId": 1
      },
      "lineNbr": 270,
      "author": {
        "id": 1378025
      },
      "writtenOn": "2024-04-17T08:24:20Z",
      "side": 1,
      "message": "Ack. I can try to tackle this as a followup (it needs more plumbing to validate() than what we have.",
      "parentUuid": "596be391_29827abb",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5215a97_2725b05a",
        "filename": "metadata/dependency_metadata.py",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1553262
      },
      "writtenOn": "2024-04-15T22:56:41Z",
      "side": 1,
      "message": "No super strong feelings but why `False` instead of `None` type.",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "819cad78_d481c5fd",
        "filename": "metadata/dependency_metadata.py",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1378025
      },
      "writtenOn": "2024-04-17T08:24:20Z",
      "side": 1,
      "message": "I was thinking about distinguishing these two:\n\n1. Local Modification wasn\u0027t declared -\u003e None (the same convention as other fields)\n2. \"Local Modification: None\" (explicitly declared) -\u003e  False\n\nI think in the ideal case, partybot would diff local vs. upstream to guess and/or cross-check declared local modification field (so the value declared here won\u0027t matter).",
      "parentUuid": "f5215a97_2725b05a",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a6a2e20_e309e8cd",
        "filename": "metadata/dependency_metadata.py",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1553262
      },
      "writtenOn": "2024-04-17T21:38:36Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "819cad78_d481c5fd",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70a180b8_42532dc3",
        "filename": "metadata/dependency_metadata.py",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1378025
      },
      "writtenOn": "2024-04-18T08:09:43Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "8a6a2e20_e309e8cd",
      "revId": "58a6d7c2f472e8014156691e8d682d093ee0816a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}