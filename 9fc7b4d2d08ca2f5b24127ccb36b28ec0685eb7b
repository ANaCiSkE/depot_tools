{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d87cbcb5_d7dd85ee",
        "filename": "cipd_bin_setup.sh",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1381059
      },
      "writtenOn": "2024-07-29T19:07:22Z",
      "side": 1,
      "message": "@sokcevic@chromium.org I didn\u0027t add the support to auto-detect Cog env and set the cipd root here. I\u0027m thinking it\u0027s probably better to setup a per-workspace cipd root in the init script to avoid multiple workspace share the same cipd root directory. The cipd root could be something like `~/.cache/cipd-$COG_WORKSPACE_NAME`.",
      "revId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c8282d3_7dd29e75",
        "filename": "cipd_bin_setup.sh",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-07-29T22:01:33Z",
      "side": 1,
      "message": "I think we\u0027ll have two problems with this: (minor) requires writing a file prior to executing cipd ensure; (major) no cache cap / eviction.\n\nMy depot_tools has ~600MB in .cipd_bin so it can start to add up quickly if we do it per-workspace.",
      "parentUuid": "d87cbcb5_d7dd85ee",
      "revId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3eae9dd4_c0b493f4",
        "filename": "cipd_bin_setup.sh",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1381059
      },
      "writtenOn": "2024-07-29T22:56:48Z",
      "side": 1,
      "message": "\u003e requires writing a file prior to executing cipd ensure\n\nI think if we can do it once at the very beginning of the init_workspace script, I assume it would be okay?\n\n\u003e no cache cap / eviction\n\nThis is a good callout. I can\u0027t think of any good solution. Maybe we can use single directory for all workspaces and then implementing a locking mechanism to prevent concurrent invocation. Or we could put the cipd pkgs in /tmp and those would be wiped out automatically. Any other suggestions?",
      "parentUuid": "0c8282d3_7dd29e75",
      "revId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15c8563d_53b66268",
        "filename": "cipd_bin_setup.sh",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1560543
      },
      "writtenOn": "2024-07-29T23:01:11Z",
      "side": 1,
      "message": "/tmp is probably acceptable solution. adding guterman@ to comment if that sounds okay.",
      "parentUuid": "3eae9dd4_c0b493f4",
      "revId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab0a7ef2_6bd03ade",
        "filename": "cipd_bin_setup.sh",
        "patchSetId": 5
      },
      "lineNbr": 21,
      "author": {
        "id": 1377971
      },
      "writtenOn": "2024-07-30T00:15:19Z",
      "side": 1,
      "message": "Sounds like a great solution to me.",
      "parentUuid": "15c8563d_53b66268",
      "revId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overridden with Unresolved-Comment-Reason: \u003creason\u003e line in change message."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "message:\"^.*Unresolved-Comment-Reason:.*\""
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*Unresolved-Comment-Reason:.*\""},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9fc7b4d2d08ca2f5b24127ccb36b28ec0685eb7b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}