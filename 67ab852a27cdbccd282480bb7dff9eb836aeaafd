{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fadc1a5a_68b17029",
        "filename": "gclient.py",
        "patchSetId": 5
      },
      "lineNbr": 1019,
      "author": {
        "id": 1529602
      },
      "writtenOn": "2022-07-19T00:31:22Z",
      "side": 1,
      "message": "Why should gclient include this? If this is for a script, can\u0027t the script keep track on the root path?",
      "revId": "67ab852a27cdbccd282480bb7dff9eb836aeaafd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "beaecdf1_e1b5e833",
        "filename": "gclient.py",
        "patchSetId": 5
      },
      "lineNbr": 1019,
      "author": {
        "id": 1528654
      },
      "writtenOn": "2022-07-21T22:01:15Z",
      "side": 1,
      "message": "I’ve not found a proper way to do it that do not require the user to explicitly set it. \nThis is what my script does right now, so that it can run. But I find it not really nice since `gclient` already knows the value, and there is no easy way for the script to guess it, unless reimplementing the code allowing gclient to compute it.\n(Admittedly, if it’s simply checking ancestors to find the first one that contains a file named `.gclient` it may not be that hard. Still, that’s a lot of IO for something that can be already known)\n\nIf you’re interested, the script can be obtained from `git clone sso://user/arthurmilchior/clone-chromium`. Ideally, I hope it’s document enough to be understandable",
      "parentUuid": "fadc1a5a_68b17029",
      "revId": "67ab852a27cdbccd282480bb7dff9eb836aeaafd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b36ea364_d39c722c",
        "filename": "gclient.py",
        "patchSetId": 5
      },
      "lineNbr": 1019,
      "author": {
        "id": 1529602
      },
      "writtenOn": "2022-07-22T17:18:02Z",
      "side": 1,
      "message": "I see what you mean. iiuc, you are trying to run your script within `gclient recurse` and you do not have access to the gclient root path. I can see the use case for this.",
      "parentUuid": "beaecdf1_e1b5e833",
      "revId": "67ab852a27cdbccd282480bb7dff9eb836aeaafd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "67ab852a27cdbccd282480bb7dff9eb836aeaafd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "67ab852a27cdbccd282480bb7dff9eb836aeaafd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "67ab852a27cdbccd282480bb7dff9eb836aeaafd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "67ab852a27cdbccd282480bb7dff9eb836aeaafd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}