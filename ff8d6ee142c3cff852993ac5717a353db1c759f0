{
  "comments": [
    {
      "key": {
        "uuid": "3365071e_ecd98f7d",
        "filename": "gerrit_util.py",
        "patchSetId": 8
      },
      "lineNbr": 845,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-11-07T00:32:33Z",
      "side": 1,
      "message": "nit: make it a set set(...)",
      "range": {
        "startLine": 845,
        "startChar": 9,
        "endLine": 845,
        "endChar": 74
      },
      "revId": "ff8d6ee142c3cff852993ac5717a353db1c759f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51aad31b_9541023d",
        "filename": "gerrit_util.py",
        "patchSetId": 8
      },
      "lineNbr": 845,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-07T00:49:42Z",
      "side": 1,
      "message": "I\u0027m not sure this suggestion makes sense (though I\u0027m reasoning about it using mostly C++ instincts). Constructing the set seems like it might be more expensive than the brute-force search (|safe| is just 53 bytes).\n\nIf we wanted to make this fast, a regex would probably make the most sense, but in the current usage it doesn\u0027t seem worth optimizing.\n\nFWIW the current implementation is exactly what urllib.encode() does.",
      "parentUuid": "3365071e_ecd98f7d",
      "range": {
        "startLine": 845,
        "startChar": 9,
        "endLine": 845,
        "endChar": 74
      },
      "revId": "ff8d6ee142c3cff852993ac5717a353db1c759f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71238601_c19547a9",
        "filename": "gerrit_util.py",
        "patchSetId": 8
      },
      "lineNbr": 845,
      "author": {
        "id": 1002100
      },
      "writtenOn": "2017-11-07T01:03:59Z",
      "side": 1,
      "message": "The breakpoint for set() being faster than a raw str is somewhere between \"Initial upload\" and \"Fix a bunch of tests for the \u0027OH SNAP IT NEVER WORKS\u0027 problem\". Wrote a little script to time running each version 100,000 times on strings of different lengths:\n\n\u003e ./setvstr.py\nTesting \"Initial upload\"\nstr: 0.318958997726\nset: 0.473040819168\nTesting \"Fix a bunch of tests for the \"OH SNAP IT NEVER WORKS\" problem\"\nstr: 1.01372504234\nset: 0.896082878113\nTesting \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis aliquet scelerisque lectus ut euismod. Mauris porttitor turpis nec velit viverra, nec convallis sem tempus. Ut non ex sed massa ultricies aliquam. Proin sit amet enim sed ante venenatis lacinia in vehicula lacus. Nullam ut volutpat eros. Praesent pulvinar tellus ut tortor condimentum, nec vehicula nulla semper. Suspendisse tortor diam, semper et nulla quis, convallis placerat ex. Maecenas sagittis eros sed bibendum eleifend. Duis vehicula odio velit, sed suscipit velit mollis sit amet. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam purus nunc, gravida vitae arcu non, mollis iaculis libero. Ut porta non turpis et accumsan. Pellentesque a porta erat. Nulla posuere, nibh vitae pharetra scelerisque, quam urna dignissim enim, a ullamcorper nisi risus quis diam. Praesent feugiat massa eget imperdiet molestie. Donec ultrices non arcu at ultricies. Mauris dignissim fermentum dolor. Suspendisse vel efficitur libero. Proin in ultricies diam. Duis ut velit nulla. Mauris aliquam, dolor sed ultrices cursus, mauris justo scelerisque est, eget suscipit sapien arcu suscipit purus. Nam consequat consectetur tristique.\"\nstr: 12.6172299385\nset: 10.8771309853",
      "parentUuid": "51aad31b_9541023d",
      "range": {
        "startLine": 845,
        "startChar": 9,
        "endLine": 845,
        "endChar": 74
      },
      "revId": "ff8d6ee142c3cff852993ac5717a353db1c759f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d821d0b1_5378a3a2",
        "filename": "gerrit_util.py",
        "patchSetId": 8
      },
      "lineNbr": 845,
      "author": {
        "id": 1141499
      },
      "writtenOn": "2017-11-07T01:12:52Z",
      "side": 1,
      "message": "tl;dr let\u0027s keep as is.\n\nIn [96]: %%timeit\n    ...:  original \u003d \"that\u0027s my new patchset #12, which fixes and rebases on top of cl/821744\"\n    ...:  safe \u003d frozenset(\u0027abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \u0027)\n    ...:  encoded \u003d \u0027\u0027.join(c if c in safe else \u0027%%%02X\u0027 % ord(c) for c in original)\n    ...: \nThe slowest run took 7.66 times longer than the fastest. This could mean that an intermediate result is being cached.\n100000 loops, best of 3: 9.4 µs per loop\n\nIn [97]: %%timeit\n    ...:  original \u003d \"that\u0027s my new patchset #12, which fixes and rebases on top of cl/821744\"\n    ...:  safe \u003d set(\u0027abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \u0027)\n    ...:  encoded \u003d \u0027\u0027.join(c if c in safe else \u0027%%%02X\u0027 % ord(c) for c in original)\n    ...: \nThe slowest run took 10.51 times longer than the fastest. This could mean that an intermediate result is being cached.\n100000 loops, best of 3: 9.33 µs per loop\n\nIn [98]: %%timeit\n    ...:  original \u003d \"that\u0027s my new patchset #12, which fixes and rebases on top of cl/821744\"\n    ...:  safe \u003d \u0027abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \u0027\n    ...:  encoded \u003d \u0027\u0027.join(c if c in safe else \u0027%%%02X\u0027 % ord(c) for c in original)\n    ...: \nThe slowest run took 6.84 times longer than the fastest. This could mean that an intermediate result is being cached.\n100000 loops, best of 3: 8.92 µs per loop",
      "parentUuid": "51aad31b_9541023d",
      "range": {
        "startLine": 845,
        "startChar": 9,
        "endLine": 845,
        "endChar": 74
      },
      "revId": "ff8d6ee142c3cff852993ac5717a353db1c759f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}