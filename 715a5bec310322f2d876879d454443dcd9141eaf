{
  "comments": [
    {
      "key": {
        "uuid": "fb4a311d_b6a5928f",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1002100
      },
      "writtenOn": "2018-04-05T21:17:27Z",
      "side": 1,
      "message": "why compare to dep_dict[dep_key] here, but to node.s below?",
      "range": {
        "startLine": 667,
        "startChar": 20,
        "endLine": 667,
        "endChar": 37
      },
      "revId": "715a5bec310322f2d876879d454443dcd9141eaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2784dd95_1b0efc97",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1167909
      },
      "writtenOn": "2018-04-05T21:38:35Z",
      "side": 1,
      "message": "Consider:\n\n1: Var(\u0027example_git\u0027) + \u0027some/path.git@deadbeef\u0027\n   dep_dict[dep_key] \u003d \u0027https://example.com/some/path.git@deadbeef\u0027\n   node.s \u003d \u0027some/path.git@deadbeef\u0027\n2: Var(\u0027example_git\u0027) + \u0027some/path.git@\u0027 + \u0027deadbeef\u0027\n   dep_dict[dep_key] \u003d \u0027https://example.com/some/path.git@deadbeef\u0027\n   node.s \u003d \u0027deadbeef\u0027\n3: Var(\u0027example_git\u0027) + \u0027some/path\u0027\n   dep_dict[dep_key] \u003d \u0027https://example.com/some/path.git\u0027\n   node.s \u003d \u0027some/path.git\u0027\n\nNote that \u0027@\u0027 is not present in dep_dict[dep_key] only if the dependency is unpinned.\n\nWe compare to node.s because we only want to change what\u0027s after \u0027@\u0027, so in the first example we would set the new value to \u0027some/path.git@new-revision\u0027 and in the second only to \u0027new-revision\u0027.\n\nI hope that makes it clear. I\u0027ll think if there\u0027s a way to refactor this to make the code clear.",
      "parentUuid": "fb4a311d_b6a5928f",
      "range": {
        "startLine": 667,
        "startChar": 20,
        "endLine": 667,
        "endChar": 37
      },
      "revId": "715a5bec310322f2d876879d454443dcd9141eaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ab9a8f4_94e2e144",
        "filename": "gclient_eval.py",
        "patchSetId": 2
      },
      "lineNbr": 667,
      "author": {
        "id": 1002100
      },
      "writtenOn": "2018-04-05T21:57:51Z",
      "side": 1,
      "message": "Right, of course, that makes sense now.\n\nI think it\u0027s the \"if x not in y; elif x in z\" structure that makes this confusing. Intuitively, those two checks should both happen against the same object y or z, not different ones.\n\nCan you restructure the elif to be just an else? If I understand correctly, if there is no \u0027@\u0027 in dep_dict[dep_key], there can\u0027t be an \u0027@\u0027 in node.s either, right?",
      "parentUuid": "2784dd95_1b0efc97",
      "range": {
        "startLine": 667,
        "startChar": 20,
        "endLine": 667,
        "endChar": 37
      },
      "revId": "715a5bec310322f2d876879d454443dcd9141eaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}