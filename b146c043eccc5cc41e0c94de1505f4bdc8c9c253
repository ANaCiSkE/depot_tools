{
  "comments": [
    {
      "key": {
        "uuid": "957b4179_29dd6283",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 45,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "nit: since this function refers to Lockfile, I would put it at the bottom of the file (so when reading the file you\u0027ll see Lockfile before lock).",
      "range": {
        "startLine": 45,
        "startChar": 6,
        "endLine": 45,
        "endChar": 14
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "876d77a9_03782608",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 45,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "957b4179_29dd6283",
      "range": {
        "startLine": 45,
        "startChar": 6,
        "endLine": 45,
        "endChar": 14
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbe9acf4_2c3d0def",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "imo, this should start with \"_\" so folks aren\u0027t tempted to use this symbol directly.",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 53,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e10e91a5_db714da0",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbe9acf4_2c3d0def",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 53,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4fbdecf_a2eb5bd0",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 62,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "_fd or _handle would make more sense to me (though HANDLE is a windows specific term)",
      "range": {
        "startLine": 62,
        "startChar": 9,
        "endLine": 62,
        "endChar": 17
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d0b6a2f_4a495aee",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 62,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4fbdecf_a2eb5bd0",
      "range": {
        "startLine": 62,
        "startChar": 9,
        "endLine": 62,
        "endChar": 17
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a022797_0f18cb61",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "why not have _lock close the handle on error?",
      "range": {
        "startLine": 105,
        "startChar": 13,
        "endLine": 105,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32857e18_63b26e85",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "It probably shouldn\u0027t close the handle if it didn\u0027t open in the first place. Maybe _lock shouldn\u0027t open handle in the first place, but assert the file is open. What do you think?",
      "parentUuid": "8a022797_0f18cb61",
      "range": {
        "startLine": 105,
        "startChar": 13,
        "endLine": 105,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6dd32034_459c5e47",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-15T16:09:56Z",
      "side": 1,
      "message": "what if lock would:\n \n  open the file\n  lock the file\n  if the lock succeeds:\n    return the HANDLE/filedescriptor to the file\n  else:\n    close the HANDLE/filedescriptor and return None\n\n? Then this would handle/fd would be passed to unlock which would close it.\n\nThen there\u0027s symmetry as well; lock opens the file, unlock closes the file, nothing else touches it.",
      "parentUuid": "32857e18_63b26e85",
      "range": {
        "startLine": 105,
        "startChar": 13,
        "endLine": 105,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09961008_b65acf57",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T21:18:56Z",
      "side": 1,
      "message": "Take a look into new patch set - I removed _open_file and _close_file and moved logic into _lock and _release (old _unlock). If we could move fd/handle out of class completely (just use it as return in lock and input in unlock), but it seems a bit off to me (e.g. handle/fd that doesn\u0027t belong to lock can be put into unlock).",
      "parentUuid": "6dd32034_459c5e47",
      "range": {
        "startLine": 105,
        "startChar": 13,
        "endLine": 105,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9958c98e_a0254c18",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "I believe this is a race; If multiple clients are trying to create and delete this file at the same time, it could be possible for this to remove the lockfile after another client acquires the lock. For example:\n\n   A: open(file)   # file is created\n   A: flock(file)  # lock is acquired\n   B: loops doing open \u0026\u0026 flock\n   A: unlock(file)\n   B: open \u0026\u0026 flock\n   A: remove(file)\n   C: open(file)  # new file is created\n   C: flock(file) # B and C both believe they have the lock now.\n\nI would recommend just leaving the lockfiles there. All clients will create or open the file, and will use flock on the file. When the lock is released, just leave it.",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 30
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65115449_d96b45eb",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Good catch, I didn\u0027t considered the case with more than two clients.",
      "parentUuid": "9958c98e_a0254c18",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 30
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f18a72e2_a484b1e3",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2020-05-15T21:46:25Z",
      "side": 1,
      "message": "Just a note: In POSIX you can just remove locked file. (i.e. lock and remove)\n\nI don\u0027t know whether it\u0027s possible on Windows.",
      "parentUuid": "65115449_d96b45eb",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 30
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "111c6781_30fd8e0a",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-15T22:13:23Z",
      "side": 1,
      "message": "How can you do this without introducing a race condition?",
      "parentUuid": "f18a72e2_a484b1e3",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 30
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "032e6e20_2587dfe5",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2020-05-15T22:39:15Z",
      "side": 1,
      "message": "If I understand the race cause correctly, the issue is that one process can remove file locked by another process. This can be fixed by locking the file first.\n\nIf the process has just created file, but could not lock it, it means that the file was removed in between. It can probably be detected by running stat() and comparing inode number.",
      "parentUuid": "111c6781_30fd8e0a",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 30
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0600762_d87a06f4",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-15T22:49:18Z",
      "side": 1,
      "message": "\u003e It can probably be detected by running stat() and comparing inode number.\n\nRight, which is an extra step; having clients not delete the file means that they\u0027ll all see the same inode number. There\u0027s some level of coordination between processes required _anyway_. Having them all do \u0027create-if-missing \u0026\u0026 lock\u0027 (and then not removing the empty file) means that there won\u0027t be a race (unless there\u0027s an external process mucking with the files, but then you could mess up the whole process anyway by just ignoring the lock altogether and blowing holes in the files it\u0027s meant to protect)",
      "parentUuid": "032e6e20_2587dfe5",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 30
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29273386_ec61aa54",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2020-05-15T23:01:05Z",
      "side": 1,
      "message": "\u003e There\u0027s some level of coordination between processes required _anyway_.\n\nThat\u0027s true. And I don\u0027t really suggest comparing inodes.\n\nI was thinking that we can probably implement file removal to keep filesystem clean (and thus checks for lost/dangling files will be simpler) relying exactly on this \"some level of coordination\". I think that we can probably remove files after locking them under the assumption that context switch between \"create\" and \"lock\" is quite unlikely.\n\nWe can probably add comment about this in the source code.\n\nBut I don\u0027t insist on that. These are just some ideas.",
      "parentUuid": "b0600762_d87a06f4",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 30
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ccc9744_2899a051",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 125,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-15T23:09:15Z",
      "side": 1,
      "message": "\u003e under the assumption that context switch between \"create\" and \"lock\" is quite unlikely.\n\n\"quite unlikely\" feels like \"will definitely happen in an annoyingly high number of instances scattered across the fleet\" :p\n\nIMO simpler is better, the cache is going to be an ugly pile of files anyway, and I\u0027m not sure how checking for dangling files would work; To properly observe the existence of the lock file, you\u0027d need to either:\n  1) know that no git cache processes are running OR\n  2) engage in the same locking dance that git_cache is using\n\nThat said, if you prefer removing the file under the lock here, the open call will also need to be updated to include O_EXCL and become a loop.",
      "parentUuid": "29273386_ec61aa54",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 30
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fcc5c75_099bc97b",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 159,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "nit: _handle",
      "range": {
        "startLine": 159,
        "startChar": 9,
        "endLine": 159,
        "endChar": 17
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da134492_0f3737d2",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 159,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8fcc5c75_099bc97b",
      "range": {
        "startLine": 159,
        "startChar": 9,
        "endLine": 159,
        "endChar": 17
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52bd847c_1a50c88c",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 162,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "I would define file-level constants for these.",
      "range": {
        "startLine": 162,
        "startChar": 43,
        "endLine": 162,
        "endChar": 56
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cef02f9_859dd318",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 162,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52bd847c_1a50c88c",
      "range": {
        "startLine": 162,
        "startChar": 43,
        "endLine": 162,
        "endChar": 56
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fd15a37_c7ba1997",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 188,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "imo, I would move all of these definitions up to the file-level import section. Or, alternately, just drop the type declarations altogether since you\u0027re literally using them in exactly one place which immediately follows the place where you declare the types :). Since these are C function calls, each slot is a dword anyway, so the argtypes are really just some fun documentation flavor anyway.",
      "range": {
        "startLine": 188,
        "startChar": 7,
        "endLine": 188,
        "endChar": 15
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bafcdb49_1b1412c6",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 188,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fd15a37_c7ba1997",
      "range": {
        "startLine": 188,
        "startChar": 7,
        "endLine": 188,
        "endChar": 15
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6333290a_6a7acb83",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 202,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "I believe this can just be None (i.e. `NULL`) since you\u0027re not doing any overlapped IO here.",
      "range": {
        "startLine": 202,
        "startChar": 8,
        "endLine": 202,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8aaeefd_869a207e",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 202,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "It has to be defined, can\u0027t be null pointer.\n\nhttps://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-lockfileex",
      "parentUuid": "6333290a_6a7acb83",
      "range": {
        "startLine": 202,
        "startChar": 8,
        "endLine": 202,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5495129e_338853ae",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 202,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-15T16:09:56Z",
      "side": 1,
      "message": "Ah, you\u0027re right; Most functions taking overlapped have it as optional, didn\u0027t realize it was required here.",
      "parentUuid": "e8aaeefd_869a207e",
      "range": {
        "startLine": 202,
        "startChar": 8,
        "endLine": 202,
        "endChar": 18
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "931e0e7b_5d232885",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 207,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "`ctypes.GetLastError()` is the same",
      "range": {
        "startLine": 207,
        "startChar": 19,
        "endLine": 207,
        "endChar": 56
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cce80a0_04c57369",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 207,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "931e0e7b_5d232885",
      "range": {
        "startLine": 207,
        "startChar": 19,
        "endLine": 207,
        "endChar": 56
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52a07c89_a85c9227",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 234,
      "author": {
        "id": 1001907
      },
      "writtenOn": "2020-05-14T01:49:52Z",
      "side": 1,
      "message": "It would be great if lock/unlock could be shared between windows and posix (i.e. the Lockfile class would implement \u0027try_lock\u0027 which returns something (file descriptor or HANDLE) or None and \u0027unlock($something)\u0027 and then have the top level lock function contain the stuff within these lock/unlock functions.",
      "range": {
        "startLine": 234,
        "startChar": 6,
        "endLine": 234,
        "endChar": 10
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef11210b_4966160a",
        "filename": "lockfile.py",
        "patchSetId": 11
      },
      "lineNbr": 234,
      "author": {
        "id": 1393469
      },
      "writtenOn": "2020-05-15T02:29:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52a07c89_a85c9227",
      "range": {
        "startLine": 234,
        "startChar": 6,
        "endLine": 234,
        "endChar": 10
      },
      "revId": "b146c043eccc5cc41e0c94de1505f4bdc8c9c253",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}