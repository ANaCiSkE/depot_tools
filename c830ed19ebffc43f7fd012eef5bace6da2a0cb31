{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5ac3a925_aa789659",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2021-09-08T00:52:09Z",
      "side": 1,
      "message": "Maybe change this second paragraph to\n\nThe default set of platforms vpython checks for does not yet include mac-arm64. Setting `verify_pep425_tag` to the list of\nplatforms we explicitly must support allows us to ensure that\nvpython specs stay mac-arm64-friendly?\n\nOr something like that?",
      "revId": "c830ed19ebffc43f7fd012eef5bace6da2a0cb31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0c0a9a3_6ef58488",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2021-09-07T20:23:09Z",
      "side": 1,
      "message": "Added comments, PTAL",
      "revId": "c830ed19ebffc43f7fd012eef5bace6da2a0cb31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b32753e4_6ae5bf51",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2021-09-07T20:33:31Z",
      "side": 1,
      "message": "So the need for these tags is temporary, and it\u0027s not just easier to roll a vpython with a fix?",
      "revId": "c830ed19ebffc43f7fd012eef5bace6da2a0cb31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f28961e6_cfa39ede",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2021-09-07T20:47:52Z",
      "side": 1,
      "message": "I\u0027m not actually sure it makes sense for most users to rely on vpython\u0027s default verification. Different uses of vpython will have varying platform requirements, and it can be an unncessary burden if vpython attempts to ensure that every platform is covered in every spec.\n\nOn the other hand, if you are writing a presubmit that runs vpython verification, you should have a good idea of which platforms you care about, and can list them explicitly. For context see https://bugs.chromium.org/p/chromium/issues/detail?id\u003d1229299#c13 and https://crbug.com/1231769\n\nIn any case, it would be difficult to roll this out as a change in vpython, for that same reason -- we know not all of our customers have updated their specs to only use mac-arm64 compatible wheels. But for those that have, we should keep that support from regressing.",
      "parentUuid": "b32753e4_6ae5bf51",
      "revId": "c830ed19ebffc43f7fd012eef5bace6da2a0cb31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbad2e66_60730ddc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2021-09-07T21:24:52Z",
      "side": 1,
      "message": "I think (part of) the problem I\u0027m having here is that I don\u0027t know what this field does. Does this mean that any package specified here has to be available in\nall of these different configurations? Or just one of them?\n\nHow does this interact with the other parts of the specfication (e.g., vpython_platform, or match tags)?",
      "parentUuid": "f28961e6_cfa39ede",
      "revId": "c830ed19ebffc43f7fd012eef5bace6da2a0cb31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1934088_3b0b41fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2021-09-07T21:38:47Z",
      "side": 1,
      "message": "The canonical reference is https://source.chromium.org/chromium/_/chromium/infra/luci/luci-go/+/5ea822acab1fe2872f1665fc2dc113da5ca53ba3:vpython/api/vpython/spec.proto (and https://source.chromium.org/chromium/_/chromium/infra/luci/luci-go/+/5ea822acab1fe2872f1665fc2dc113da5ca53ba3:vpython/api/vpython/pep425.proto )\n\nI\u0027m not sure exactly what you mean by vpython_platform, that\u0027s not a field in the spec.\n\nBasically what this is does is ensures that for each listed pep tag, all of the wheels exist. If a wheel uses match tags, I believe it will be verified only if it matches. This is a replacement of the default tag set here: https://source.chromium.org/chromium/infra/infra/+/main:go/src/infra/tools/vpython/verification.go",
      "parentUuid": "fbad2e66_60730ddc",
      "revId": "c830ed19ebffc43f7fd012eef5bace6da2a0cb31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd60724b_f7f477c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2021-09-07T21:55:24Z",
      "side": 1,
      "message": "\u003e The canonical reference is [1] ( and [2] )\n\nYeah, unfortunately the comments on lines 75-78 of [1] don\u0027t specify if the verification is \"all\" or \"any\". And [2] doesn\u0027t actually tell you what\nthe allowed values are. At least the code in verification.go *does* tell\nyou that. But, if memory serves, the actual mapping onto PEP-425 tags as\nreported from Python is kinda weird :(.\n\n\u003e I\u0027m not sure exactly what you mean by vpython_platform,\n\u003e that\u0027s not a field in the spec.\n\nI\u0027m referring to something like https://source.chromium.org/chromium/chromium/src/+/main:.vpython3;drc\u003d02442ef0cb33cdbf2c38a70f2ea10263c5f81204;l\u003d52 where `${vpython_platform}` is embedded in the name of the wheel. IIRC this also expands out to some appropriate set of PEP-425 tags in some weird way.",
      "parentUuid": "b1934088_3b0b41fa",
      "revId": "c830ed19ebffc43f7fd012eef5bace6da2a0cb31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c10e0a2c_2d056b9b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1115868
      },
      "writtenOn": "2021-09-07T22:19:15Z",
      "side": 1,
      "message": "Yeah, the pep425 tags are a little cumbersome to work with.\n\nAh so that ${vpython_platform} ... does expand to a string representation of the \"best\" PEP425 tag for the current interpreter (platform_python_abi I believe). (We choose the \"best\" tag to be the one that is approximately the most specific).",
      "parentUuid": "cd60724b_f7f477c0",
      "revId": "c830ed19ebffc43f7fd012eef5bace6da2a0cb31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}